
// Получает предопределенный узел плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  ЭтотУзел - ПланОбменаСсылка - предопределенный узел плана обмена
//
&НаСервереБезКонтекста
Функция ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена) Экспорт
	Возврат ПланыОбмена[ИмяПланаОбмена].ЭтотУзел()
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьОбщийМодуль(НазваниеМодуля)
	Возврат Метаданные.ОбщиеМодули.Найти(НазваниеМодуля) <> Неопределено;
КонецФункции
	
&НаСервереБезКонтекста
Функция ЗначениеИзСтроки(ВнутреннееПредставление)
	Возврат ЗначениеИзСтрокиВнутр(ВнутреннееПредставление);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровДляРегистра(ИмяРегистра, Знач ЗначениеОтбора)
	
	ТипЗначения = Тип("РегистрСведенийКлючЗаписи." + ИмяРегистра);
	ПараметрыОтбора = Новый Массив(1);
	Отбор = ЗначениеИзСтрокиВнутр(ЗначениеОтбора);
	СтруктураОтбора = Новый Структура;
	Для каждого ЭлементОтбора Из Отбор Цикл    
		СтруктураОтбора.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
	КонецЦикла; //Для каждого  Из  
	ПараметрыОтбора[0] = СтруктураОтбора;
	КлючЗаписи = Новый(ТипЗначения, ПараметрыОтбора);
	ПараметрыФормы = Новый Структура("Ключ", КлючЗаписи);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеУниверсальное(ТекстСообщения)
	Если ЭтоПлатформа82 Или РежимСовместимости82 ИЛИ ИспользованиеМодальности Тогда
		Выполнить("Предупреждение(ТекстСообщения)");
	Иначе
		Выполнить("ПоказатьПредупреждение(, ТекстСообщения)");
	КонецЕсли; 
КонецПроцедуры //ПоказатьПредупреждениеУниверсальное

&НаКлиенте
Процедура ПоказатьЗначениеУниверсальное(СсылкаНаОбъект)
	Если ЭтоПлатформа82 Или РежимСовместимости82 ИЛИ ИспользованиеМодальности Тогда
		Выполнить("ОткрытьЗначение(СсылкаНаОбъект)");
	Иначе
		Выполнить("ПоказатьЗначение(, СсылкаНаОбъект)");
	КонецЕсли; 
КонецПроцедуры //

&НаСервере
Процедура УстановитьОсновнуюТаблицуСпискаНаСервере()
	
	Элементы.СписокУзловОбменаВыполнитьОбменДанными.Видимость = Ложь;
	Элементы.СписокУзловОбменаКонтекстноеМенюВыполнитьОбменДанными.Видимость = Элементы.СписокУзловОбменаВыполнитьОбменДанными.Видимость;
	Если НЕ ЗначениеЗаполнено(ТекущийПланОбмена) Тогда
		СписокУзловОбмена.ДинамическоеСчитываниеДанных = Ложь;
		СписокУзловОбмена.ОсновнаяТаблица = "";
		Возврат;
	КонецЕсли;
	
	ОсновнаяТаблица = "ПланОбмена." + ТекущийПланОбмена;
	СписокУзловОбмена.ОсновнаяТаблица = ОсновнаяТаблица;
	СписокУзловОбмена.ДинамическоеСчитываниеДанных = Истина;
	СписокУзловОбмена.ПроизвольныйЗапрос = Истина;
	СписокУзловОбмена.ТекстЗапроса = "
	|ВЫБРАТЬ
	|	УзелПланОбмена.Код,
	|	УзелПланОбмена.Ссылка,
	|	УзелПланОбмена.Наименование,
	|	УзелПланОбмена.НомерПринятого,
	|	УзелПланОбмена.НомерОтправленного,
	|	ВЫБОР КОГДА УзелПланОбмена.Ссылка = &ЭтотУзел ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Предопределенный,
	|	ВЫБОР КОГДА УзелПланОбмена.Ссылка = &ЭтотУзел ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ПредопределенныйСортировка
	|	//ПоляСостояниеОбменов
	|ИЗ
	|	[ПланОбмена] КАК УзелПланОбмена
	|	//СоединениеСостояниеОбменов
	|";
	
	ЕстьПеречислениеРезультатыВыполненияОбмена = Метаданные.Перечисления.Найти("РезультатыВыполненияОбмена") <> Неопределено;
	ЕстьРегистрСостояниеОбменов = Метаданные.РегистрыСведений.Найти("СостояниеУспешныхОбменовДанными") <> Неопределено;
	Если НЕ ЕстьРегистрСостояниеОбменов Тогда
		ЕстьРегистрСостояниеОбменов = Метаданные.РегистрыСведений.Найти("СостоянияУспешныхОбменовДанными") <> Неопределено;
		Если ЕстьРегистрСостояниеОбменов Тогда
			ИмяРегистраСостоянияУспешныхОбменовДанными = "СостоянияУспешныхОбменовДанными";
			ИмяРегистраСостоянияОбменовДанными = "СостоянияОбменовДанными";
		КонецЕсли; 
	Иначе
		ИмяРегистраСостоянияУспешныхОбменовДанными = "СостояниеУспешныхОбменовДанными";
		ИмяРегистраСостоянияОбменовДанными = "СостояниеОбменовДанными";
	КонецЕсли; 
	
	Если ЕстьРегистрСостояниеОбменов И ЕстьПеречислениеРезультатыВыполненияОбмена Тогда
		СтрокаПоляСостояниеОбменов = ",
		|	СостояниеОбменовВыгрузка.ДатаОкончания КАК ДатаОкончанияВыгрузка,
		|	СостояниеОбменовЗагрузка.ДатаОкончания КАК ДатаОкончанияЗагрузка,
		|	СостояниеОбменовВыгрузкаРезультат.ДатаОкончания КАК РезультатВыгрузкаДатаОкончания,
		|	СостояниеОбменовВыгрузкаРезультат.РезультатВыполненияОбмена КАК РезультатВыгрузка,
		|	ВЫБОР
		|		КОГДА СостояниеОбменовВыгрузкаРезультат.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
		|			ТОГДА 3
		|		КОГДА СостояниеОбменовВыгрузкаРезультат.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
		|			ТОГДА 3
		|		КОГДА СостояниеОбменовВыгрузкаРезультат.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК РезультатВыгрузкаНомерКартинки,
		|	СостояниеОбменовЗагрузкаРезультат.ДатаОкончания КАК РезультатЗагрузкаДатаОкончания,
		|	СостояниеОбменовЗагрузкаРезультат.РезультатВыполненияОбмена КАК РезультатЗагрузка,
		|	ВЫБОР
		|		КОГДА СостояниеОбменовЗагрузкаРезультат.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
		|			ТОГДА 3
		|		КОГДА СостояниеОбменовЗагрузкаРезультат.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
		|			ТОГДА 3
		|		КОГДА СостояниеОбменовЗагрузкаРезультат.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК РезультатЗагрузкаНомерКартинки
		|";
		СписокУзловОбмена.ТекстЗапроса = СтрЗаменить(СписокУзловОбмена.ТекстЗапроса, "//ПоляСостояниеОбменов", СтрокаПоляСостояниеОбменов);
		
		СтрокаСоединение = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.[СостоянияУспешныхОбменовДанными] КАК СостояниеОбменовВыгрузка
		|		ПО УзелПланОбмена.Ссылка = СостояниеОбменовВыгрузка.УзелИнформационнойБазы
		|			И (СостояниеОбменовВыгрузка.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.[СостоянияУспешныхОбменовДанными] КАК СостояниеОбменовЗагрузка
		|		ПО УзелПланОбмена.Ссылка = СостояниеОбменовЗагрузка.УзелИнформационнойБазы
		|			И (СостояниеОбменовЗагрузка.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.[СостоянияОбменовДанными] КАК СостояниеОбменовВыгрузкаРезультат
		|		ПО (СостояниеОбменовВыгрузкаРезультат.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных))
		|			И УзелПланОбмена.Ссылка = СостояниеОбменовВыгрузкаРезультат.УзелИнформационнойБазы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.[СостоянияОбменовДанными] КАК СостояниеОбменовЗагрузкаРезультат
		|		ПО УзелПланОбмена.Ссылка = СостояниеОбменовЗагрузкаРезультат.УзелИнформационнойБазы
		|			И (СостояниеОбменовЗагрузкаРезультат.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных))
		|";
		СписокУзловОбмена.ТекстЗапроса = СтрЗаменить(СписокУзловОбмена.ТекстЗапроса, "//СоединениеСостояниеОбменов", СтрокаСоединение);
		СписокУзловОбмена.ТекстЗапроса = СтрЗаменить(СписокУзловОбмена.ТекстЗапроса, "[СостоянияУспешныхОбменовДанными]", ИмяРегистраСостоянияУспешныхОбменовДанными);
		СписокУзловОбмена.ТекстЗапроса = СтрЗаменить(СписокУзловОбмена.ТекстЗапроса, "[СостоянияОбменовДанными]", ИмяРегистраСостоянияОбменовДанными);
	КонецЕсли; 
	
	СписокУзловОбмена.ТекстЗапроса = СтрЗаменить(СписокУзловОбмена.ТекстЗапроса, "[ПланОбмена]", ОсновнаяТаблица);
	ЭтотУзелПланаОбмена = ПолучитьЭтотУзелПланаОбмена(ТекущийПланОбмена);
	СписокУзловОбмена.Параметры.УстановитьЗначениеПараметра("ЭтотУзел", ЭтотУзелПланаОбмена);
	
	Если Элементы.Найти("СписокУзловОбменаКод") = Неопределено Тогда
		
		Элемент = Элементы.Добавить("СписокУзловОбменаКод", Тип("ПолеФормы"), Элементы.СписокУзловОбмена);
		Элемент.ПутьКДанным = "СписокУзловОбмена.Код";
		Элемент.Заголовок = НСтр("ru = 'Код'");
		Элемент = Элементы.Добавить("СписокУзловОбменаСсылка", Тип("ПолеФормы"), Элементы.СписокУзловОбмена);
		Элемент.ПутьКДанным = "СписокУзловОбмена.Ссылка";
		Элемент.Заголовок = НСтр("ru = 'Информационная база'");
		Элемент = Элементы.Добавить("СписокУзловОбменаНаименование", Тип("ПолеФормы"), Элементы.СписокУзловОбмена);
		Элемент.ПутьКДанным = "СписокУзловОбмена.Наименование";
		Элемент.Видимость = Ложь;
		Элемент = Элементы.Добавить("СписокУзловОбменаНомерПринятого", Тип("ПолеФормы"), Элементы.СписокУзловОбмена);
		Элемент.ПутьКДанным = "СписокУзловОбмена.НомерПринятого";
		Элемент.Заголовок = НСтр("ru = 'N принятого'");
		Элемент = Элементы.Добавить("СписокУзловОбменаНомерОтправленного", Тип("ПолеФормы"), Элементы.СписокУзловОбмена);
		Элемент.ПутьКДанным = "СписокУзловОбмена.НомерОтправленного";
		Элемент.Заголовок = НСтр("ru = 'N отправленного'");
		
		Элемент = Элементы.Добавить("СписокУзловОбменаПредопределенный", Тип("ПолеФормы"), Элементы.СписокУзловОбмена);
		Элемент.ПутьКДанным = "СписокУзловОбмена.Предопределенный";
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.Видимость = Ложь;
		Элемент = Элементы.Добавить("СписокУзловОбменаПредопределенныйСортировка", Тип("ПолеФормы"), Элементы.СписокУзловОбмена);
		Элемент.ПутьКДанным = "СписокУзловОбмена.ПредопределенныйСортировка";
		Элемент.Видимость = Ложь;
		
	КонецЕсли; 
	
	Если ЕстьРегистрСостояниеОбменов И ЕстьПеречислениеРезультатыВыполненияОбмена И Элементы.Найти("ГруппаСостоянияЗагрузки") = Неопределено Тогда
		
		НоваяГруппа = Элементы.Добавить("ГруппаСостоянияЗагрузки", Тип("ГруппаФормы"), Элементы.СписокУзловОбмена);
		НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
		НоваяГруппа.Группировка = ГруппировкаКолонок.ВЯчейке;
		
		Элемент = Элементы.Добавить("СписокУзловОбменаРезультатЗагрузкаНомерКартинки", Тип("ПолеФормы"), НоваяГруппа);
		Элемент.ПутьКДанным = "СписокУзловОбмена.РезультатЗагрузкаНомерКартинки";
		Элемент.Вид = ВидПоляФормы.ПолеКартинки;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		Элемент = Элементы.Добавить("СписокУзловОбменаРезультатЗагрузкаДатаОкончания", Тип("ПолеФормы"), НоваяГруппа);
		Элемент.ПутьКДанным = "СписокУзловОбмена.РезультатЗагрузкаДатаОкончания";
		Элемент.Заголовок = НСтр("ru = 'Дата загрузки'");
		
		Элемент = Элементы.Добавить("СписокУзловОбменаДатаОкончанияЗагрузка", Тип("ПолеФормы"), Элементы.СписокУзловОбмена);
		Элемент.ПутьКДанным = "СписокУзловОбмена.ДатаОкончанияЗагрузка";
		Элемент.Заголовок = НСтр("ru = 'Успешная загрузка'");
		Если ЕстьРеквизитОбъекта(БиблиотекаКартинок, "ПереместитьВлево") Тогда
			Элемент.КартинкаШапки = БиблиотекаКартинок.ПереместитьВлево;
		КонецЕсли; 
		
		НоваяГруппа = Элементы.Добавить("ГруппаСостоянияВыгрузки", Тип("ГруппаФормы"), Элементы.СписокУзловОбмена);
		НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
		НоваяГруппа.Группировка = ГруппировкаКолонок.ВЯчейке;
		
		Элемент = Элементы.Добавить("СписокУзловОбменаРезультатВыгрузкаНомерКартинки", Тип("ПолеФормы"), НоваяГруппа);
		Элемент.ПутьКДанным = "СписокУзловОбмена.РезультатВыгрузкаНомерКартинки";
		Элемент.Вид = ВидПоляФормы.ПолеКартинки;
		
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент = Элементы.Добавить("СписокУзловОбменаРезультатВыгрузкаДатаОкончания", Тип("ПолеФормы"), НоваяГруппа);
		Элемент.ПутьКДанным = "СписокУзловОбмена.РезультатВыгрузкаДатаОкончания";
		Элемент.Заголовок = НСтр("ru = 'Дата выгрузки'");
		
		Элемент = Элементы.Добавить("СписокУзловОбменаДатаОкончанияВыгрузка", Тип("ПолеФормы"), Элементы.СписокУзловОбмена);
		Элемент.ПутьКДанным = "СписокУзловОбмена.ДатаОкончанияВыгрузка";
		Элемент.Заголовок = НСтр("ru = 'Успешная выгрузка'");
		Если ЕстьРеквизитОбъекта(БиблиотекаКартинок, "ПереместитьВправо") Тогда
			Элемент.КартинкаШапки = БиблиотекаКартинок.ПереместитьВправо;
		КонецЕсли; 
		
		Элементы.СписокУзловОбменаРезультатВыгрузкаНомерКартинки.КартинкаЗначений = Элементы.ДекорацияКартинка.Картинка;
		Элементы.СписокУзловОбменаРезультатЗагрузкаНомерКартинки.КартинкаЗначений = Элементы.ДекорацияКартинка.Картинка;
		
	КонецЕсли; 
	
	Если СписокУзловОбмена.Порядок.Элементы.Количество() = 1 Тогда
		НовыйПорядок = СписокУзловОбмена.Порядок.Элементы[0];
	Иначе
		НовыйПорядок = СписокУзловОбмена.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли; 
    НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных("ПредопределенныйСортировка");
    НовыйПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
    НовыйПорядок.Использование = Истина;
	
	ОформлениеСтроки = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	Для каждого ПодчиненныйЭлемент Из Элементы.СписокУзловОбмена.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Для каждого ПодчиненныйЭлементГруппы Из ПодчиненныйЭлемент.ПодчиненныеЭлементы Цикл
				ЭлементПоля = ОформлениеСтроки.Поля.Элементы.Добавить();
				ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПодчиненныйЭлементГруппы.Имя);
				ЭлементПоля.Использование = Истина;
			КонецЦикла;
		Иначе
			ЭлементПоля = ОформлениеСтроки.Поля.Элементы.Добавить();
			ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПодчиненныйЭлемент.Имя);
			ЭлементПоля.Использование = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	ЭлементОтбора = ОформлениеСтроки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокУзловОбмена.Предопределенный");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементЦветаОформления = ОформлениеСтроки.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  WebЦвета.ТемноСерый;
	ЭлементЦветаОформления.Использование = Истина;
	ЭлементЦветаОформления = ОформлениеСтроки.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение =  WebЦвета.ТусклоСерый;
	ЭлементЦветаОформления.Использование = Истина;
		
	Если ЗначениеЗаполнено(УзелОбмена) Тогда
		Элементы.СписокУзловОбмена.ТекущаяСтрока = УзелОбмена;
	Иначе
		УзелОбмена = Элементы.СписокУзловОбмена.ТекущаяСтрока;
	КонецЕсли;
	Если ЕстьОбщийМодуль("ОбменДаннымиПовтИсп") Тогда
		Результат = Вычислить("ОбменДаннымиПовтИсп.ПланыОбменаБСП().Найти(ТекущийПланОбмена) <> Неопределено");
		Элементы.СписокУзловОбменаВыполнитьОбменДанными.Видимость = Результат;
		Элементы.СписокУзловОбменаКонтекстноеМенюВыполнитьОбменДанными.Видимость = Элементы.СписокУзловОбменаВыполнитьОбменДанными.Видимость;
		Элементы.СписокУзловОбменаВыполнитьОбменДанными.Доступность = ЭтотУзелПланаОбмена <> УзелОбмена;
		Элементы.СписокУзловОбменаКонтекстноеМенюВыполнитьОбменДанными.Доступность = Элементы.СписокУзловОбменаВыполнитьОбменДанными.Доступность;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокУзловОбмена()
	
	Элементы.СписокУзловОбмена.Доступность = ЗначениеЗаполнено(ТекущийПланОбмена);
	Попытка
		УстановитьОсновнуюТаблицуСпискаНаСервере();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДеревоОбъектовОбработчик(ОтветНаВопрос, Параметры) Экспорт
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда 
		ДанныеОбменаЗаполнить();
		РазвернутьДерево();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДеревоОбъектов()
	
	Если Элементы.СписокУзловОбмена.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущийУзелОбмена = Элементы.СписокУзловОбмена.ТекущиеДанные.Ссылка;
	Если УзелОбмена = ТекущийУзелОбмена Тогда
		Возврат;
	КонецЕсли; 
	УзелОбмена = ТекущийУзелОбмена;
	
	Элементы.СписокУзловОбменаВыполнитьОбменДанными.Доступность = ЭтотУзелПланаОбмена <> УзелОбмена;
	Элементы.СписокУзловОбменаКонтекстноеМенюВыполнитьОбменДанными.Доступность = Элементы.СписокУзловОбменаВыполнитьОбменДанными.Доступность;
	
	ПараметрыПодтверждения = Новый Структура;
	ТекстВопроса = НСтр("ru = 'Перечитать дерево объектов?'");
	
	Если ЭтоПлатформа82 ИЛИ ИспользованиеМодальности ИЛИ РежимСовместимости82 Тогда
		ОтветНаВопрос = Неопределено;
		Выполнить("ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);");
		ПеречитатьДеревоОбъектовОбработчик(ОтветНаВопрос, ПараметрыПодтверждения);
	Иначе
		Выполнить("
		|Оповещение = Новый ОписаниеОповещения(""ПеречитатьДеревоОбъектовОбработчик"", ЭтаФорма, ПараметрыПодтверждения);
		|ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		|");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДанныеОбменаЗаполнить()
	
	ДанныеОбмена.ПолучитьЭлементы().Очистить();
	
	МетаданныеПланаОбмена = Неопределено;
	Если УзелОбмена <> Неопределено Тогда
		МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	КонецЕсли;
	
	ТабОбъектыМетаданных = Новый ТаблицаЗначений;
	ТабОбъектыМетаданных.Колонки.Добавить("Имя");
	ТабОбъектыМетаданных.Колонки.Добавить("Синоним");
	ТабОбъектыМетаданных.Колонки.Добавить("Картинка");
	ТабОбъектыМетаданных.Колонки.Добавить("КартинкаОбъекта");
	ТабОбъектыМетаданных.Колонки.Добавить("Корень");
	
	ТабОбъектыМетаданных_НоваяСтрока("Константы", 						"Константы", 						БиблиотекаКартинок.Константа, БиблиотекаКартинок.Константа, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("Справочники", 					"Справочники", 						БиблиотекаКартинок.Справочник, БиблиотекаКартинок.Справочник, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("Документы", 						"Документы", 						БиблиотекаКартинок.Документ,БиблиотекаКартинок.ДокументОбъект, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("Последовательности", 				"Последовательности", 				БиблиотекаКартинок.ПорядокКомпоновкиДанных,БиблиотекаКартинок.ПорядокКомпоновкиДанных, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("ПланыВидовХарактеристик", 		"Планы видов характеристик", 		БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("ПланыСчетов", 					"Планы счетов", 					БиблиотекаКартинок.ПланСчетов, БиблиотекаКартинок.ПланСчетовОбъект, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("ПланыВидовРасчета", 				"Планы видов расчета", 				БиблиотекаКартинок.ПланВидовРасчета, БиблиотекаКартинок.ПланВидовРасчетаОбъект, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("РегистрыСведений", 				"Регистры сведений", 				БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведений, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("РегистрыНакопления", 				"Регистры накопления", 				БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопления, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("РегистрыБухгалтерии", 			"Регистры бухгалтерии", 			БиблиотекаКартинок.РегистрБухгалтерии, БиблиотекаКартинок.РегистрБухгалтерии, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("РегистрыРасчета", 				"Регистры расчета", 				БиблиотекаКартинок.РегистрРасчета, БиблиотекаКартинок.РегистрРасчета, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("БизнесПроцессы", 					"Бизнес-процессы", 					БиблиотекаКартинок.БизнесПроцесс, БиблиотекаКартинок.БизнесПроцессОбъект, Истина, ТабОбъектыМетаданных);
	ТабОбъектыМетаданных_НоваяСтрока("Задачи", 							"Задачи", 							БиблиотекаКартинок.Задача, БиблиотекаКартинок.ЗадачаОбъект, Истина, ТабОбъектыМетаданных);
	
	// Создаем корневой элемент - представление как имя конфигурации
	Корень = НоваяСтрокаДерева(Метаданные, 79, ДанныеОбмена);
	Для каждого текСтрока ИЗ ТабОбъектыМетаданных Цикл
		ВыводКоллекцииОбъектовМетаданных(текСтрока, текСтрока.Картинка, текСтрока.КартинкаОбъекта, Корень, МетаданныеПланаОбмена);
	КонецЦикла;
	
	// удаляем строки без подчиненных элементов
	// используем обратный порядок обхода дерева значений
	Коллекция = ДанныеОбмена.ПолучитьЭлементы()[0];
	КолвоЭлементовКоллекции = Коллекция.ПолучитьЭлементы().Количество();
	Коллекция = Коллекция.ПолучитьЭлементы();
	
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ТекущийИндекс = КолвоЭлементовКоллекции - ОбратныйИндекс;
		СтрокаДерева = Коллекция[ТекущийИндекс];
		Если СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
			Коллекция.Удалить(ТекущийИндекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗагружатьИзменения Тогда
		ПоказатьОбъекты();
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет существует ли реквизит у объекта.
//
&НаСервереБезКонтекста
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	Перем КлючУникальностиОбъекта;
	
	КлючУникальностиОбъекта   = Новый УникальныйИдентификатор;

	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальностиОбъекта);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальностиОбъекта;
	
КонецФункции // ЕстьРеквизитОбъекта()

&НаСервере
Процедура ПоказатьОбъекты(ИндексСтроки = Неопределено, Уровень = 0)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭтотУзелПланаОбмена = УзелОбмена Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	
	ТипДанныхУдаления = Тип("УдалениеОбъекта");
	КоличествоЗаписанныхОбъектов = 0;
	
	// [Begin] Modded by trumanl http://infostart.ru/profile/226047/
	Если ИндексСтроки = Неопределено ИЛИ Уровень = 0 Тогда
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, УзелОбмена.НомерОтправленного + 1);
		// очистка
		Для Каждого СтрКонф Из ДанныеОбмена.ПолучитьЭлементы() Цикл
			Для Каждого СтрТип Из СтрКонф.ПолучитьЭлементы() Цикл
				Для Каждого Стр Из СтрТип.ПолучитьЭлементы() Цикл
					Стр.ПолучитьЭлементы().Очистить();
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ТекСтрока = ДанныеОбмена.НайтиПоИдентификатору(ИндексСтроки);
		Фильтр = Новый Массив;
		Если Уровень = 2 Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ТекСтрока.Название + "." + ТекСтрока.Объект);
			Фильтр.Добавить(МетаданныеОбъекта);
			// очистка
			ТекСтрока.ПолучитьЭлементы().Очистить();
		ИначеЕсли Уровень = 1 Тогда
			Для Каждого Стр Из ТекСтрока.ПолучитьЭлементы() Цикл
				МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Стр.Название + "." + Стр.Объект);
				Фильтр.Добавить(МетаданныеОбъекта);
				// очистка
				Стр.ПолучитьЭлементы().Очистить();
			КонецЦикла;
		КонецЕсли;
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, УзелОбмена.НомерОтправленного + 1, Фильтр);
	КонецЕсли;	
	// [End] Modded by trumanl http://infostart.ru/profile/226047/
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		// имененный элемент
		Данные = ВыборкаИзменений.Получить();
		
		// данные должны быть
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоУдаление = (ТипДанныхУдаления = ТипЗнч(Данные));
		
		Если ЭтоУдаление Тогда
			МетаданныеОбъекта = Данные.Ссылка.Метаданные();
		Иначе	
			МетаданныеОбъекта = Данные.Метаданные();
		КонецЕсли;
		
		// определяем делать ли выгрузку того что отобрали или нет...
		СтрокаНайденногоПараметра = Неопределено;
		СтрокаВыгрузки = Неопределено;
		НаименованиеДляВыгрузки = "";
		СсылкаНаОбъект = Неопределено;
		ЗначениеОтбора = "";
		
		СтрокаВыгрузки = ВернутьСтрокуДереваПоМетаданным(ДанныеОбмена, МетаданныеОбъекта);
		Если СтрокаВыгрузки = Неопределено Тогда
			Сообщить("Невозможно определить класс объекта: " + Строка(Данные), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Родитель = ДанныеОбмена.НайтиПоИдентификатору(СтрокаВыгрузки.ПолучитьИдентификатор()).ПолучитьРодителя();
		ПрефиксСсылки = СформироватьПрефиксТипаСсылки(СтрокаВыгрузки, Родитель);
		
		Если Не ПустаяСтрока(ПрефиксСсылки) Тогда
			Если ЭтоУдаление Тогда
				НаименованиеДляВыгрузки = Строка(Данные.Ссылка);
			Иначе
				НаименованиеДляВыгрузки = Строка(Данные);
			КонецЕсли;
		Иначе
			ИмяДанных = Родитель.Объект;
			
			Если ИмяДанных = "РегистрыСведений"
				ИЛИ ИмяДанных = "РегистрыНакопления"
				ИЛИ ИмяДанных = "РегистрыБухгалтерии"
				ИЛИ ИмяДанных = "РегистрыРасчета" Тогда
				
				НаименованиеДляВыгрузки = "Набор записей " + Строка(СтрокаВыгрузки.ПолучитьЭлементы().Количество() + 1);
				Если ИмяДанных <> "РегистрыСведений" Тогда
					НаименованиеДляВыгрузки = НаименованиеДляВыгрузки + " " + Данные.Отбор.Регистратор;
					СсылкаНаОбъект = Данные.Отбор.Регистратор.Значение;
				ИначеЕсли МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
					НаименованиеДляВыгрузки = НаименованиеДляВыгрузки + " " + Данные.Отбор.Регистратор;
					СсылкаНаОбъект = Данные.Отбор.Регистратор.Значение;
				Иначе
					НаименованиеДляВыгрузки = НаименованиеДляВыгрузки + " (" + Строка(Данные.Отбор)	+ ")";
				КонецЕсли;  //  
				ЗначениеОтбора = ЗначениеВСтрокуВнутр(Данные.Отбор);
			Иначе
				НаименованиеДляВыгрузки = Строка(Данные);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДобавления = СтрокаВыгрузки.ПолучитьЭлементы().Добавить();
		СтрокаДобавления.Объект 			 = НаименованиеДляВыгрузки;
		СтрокаДобавления.ОбъектПредставление = НаименованиеДляВыгрузки;
		Если ЕстьРеквизитОбъекта(Данные, "Ссылка") Тогда
			СтрокаДобавления.СсылкаНаОбъект = Данные.Ссылка;
			СтрокаДобавления.ОбъектИмя = СтрокаВыгрузки.Название + "." + СтрокаВыгрузки.Объект;
		ИначеЕсли СсылкаНаОбъект <> Неопределено Тогда
			СтрокаДобавления.СсылкаНаОбъект = СсылкаНаОбъект;
			СтрокаДобавления.ОбъектИмя = "Документ." + СсылкаНаОбъект.Метаданные().Имя;
		Иначе
			СтрокаДобавления.ОбъектИмя = МетаданныеОбъекта.ПолноеИмя();	
		КонецЕсли;
		СтрокаДобавления.ЗначениеОтбора = ЗначениеОтбора;
		
		Если ЭтоУдаление Тогда
			СтрокаДобавления.Картинка = БиблиотекаКартинок.Удалить;
		Иначе
			СтрокаДобавления.Картинка = Родитель.Картинка;
		КонецЕсли;
		
		КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	Для Каждого Стр Из ДанныеОбмена.ПолучитьЭлементы() Цикл
		Элементы.ДанныеОбмена.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыводКоллекцииОбъектовМетаданных(ТекМетаданные, Картинка, КартинкаОбъекта,
	Родитель=Неопределено,
	МетаданныеПланаОбмена=Неопределено)
	
	НоваяСтрока = НоваяСтрокаДерева(ТекМетаданные, Картинка, Родитель,, Истина);
	
	Для каждого ЭлементКоллекцииМетаданных ИЗ Метаданные[ТекМетаданные.Имя] Цикл
		Если МетаданныеПланаОбмена = Неопределено ИЛИ НЕ МетаданныеПланаОбмена.Состав.Содержит(ЭлементКоллекцииМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДляОбмена = МетаданныеПланаОбмена.Состав.Найти(ЭлементКоллекцииМетаданных);
		НоваяСтрокаДерева(ЭлементКоллекцииМетаданных,
		КартинкаОбъекта,
		НоваяСтрока,
		(СтрокаДляОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить));
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция НоваяСтрокаДерева(ТекМетаданные, Картинка, Родитель, Авторегистрация = Ложь, НеОтображатьКоличество = Ложь)
	
	ТекЭлементы = Родитель.ПолучитьЭлементы();
	НоваяСтрока = ТекЭлементы.Добавить();
	НоваяСтрока.Объект 				= ТекМетаданные.Имя;
	НоваяСтрока.ОбъектПредставление = ?(ЗначениеЗаполнено(ТекМетаданные.Синоним), ТекМетаданные.Синоним, ТекМетаданные.Имя);
	НоваяСтрока.Картинка 			= Картинка;
	
	НоваяСтрока.РежимАвтоРегистрации = Авторегистрация;
	НоваяСтрока.КоличествоЗарегистрированных = 0;
	
	Уровень = ПолучитьУровеньСервер(НоваяСтрока, ДанныеОбмена);
	Если Уровень = 2 Тогда
		НоваяСтрока.Название = ПолучитьПоМетаданномуНазвание(ТекМетаданные);
	КонецЕсли;
	
	Если НЕ НеОтображатьКоличество И ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения Тогда
		ОбновитьКоличествоЗарегистрированныхДляСтрокиДерева(НоваяСтрока, ТекМетаданные);				
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ОбновитьКоличествоЗарегистрированныхДляСтрокиДерева(СтрокаДерева, МетаданныеОбъекта)
	
	СтароеКоличествоЗарегистрированныхОбъектов = СтрокаДерева.КоличествоЗарегистрированных;
	
	КоличествоОбъектовСРегистрацией = ПолучитьКоличествоЗарегистрированныхОбъектовДляМетаданногоПоУзлу(МетаданныеОбъекта, УзелОбмена);
	СтрокаДерева.КоличествоЗарегистрированных = КоличествоОбъектовСРегистрацией;
	ПриВыводеСтроки(СтрокаДерева);
	
	Родитель = ДанныеОбмена.НайтиПоИдентификатору(СтрокаДерева.ПолучитьИдентификатор()).ПолучитьРодителя();
	
	Пока Родитель <> Неопределено Цикл
		
		Родитель.КоличествоЗарегистрированных = Родитель.КоличествоЗарегистрированных - СтароеКоличествоЗарегистрированныхОбъектов + КоличествоОбъектовСРегистрацией;		
		ПриВыводеСтроки(Родитель);
		Родитель = ДанныеОбмена.НайтиПоИдентификатору(Родитель.ПолучитьИдентификатор()).ПолучитьРодителя();
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПриВыводеСтроки(ДанныеСтроки)
	УровеньДерева = ПолучитьУровеньСервер(ДанныеСтроки, ДанныеОбмена);
	
	Если УровеньДерева = 2 Тогда
		Если ДанныеСтроки.РежимАвтоРегистрации = Истина Тогда
			ДанныеСтроки.Регистрация = "Разрешить";
		Иначе
			ДанныеСтроки.Регистрация = "Запретить";
		КонецЕсли;
		
		//Если ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения
		//	И ДанныеСтроки.КоличествоЗарегистрированных <> 0 Тогда
		//	
		//	ДанныеСтроки.Регистрация = ДанныеСтроки.Регистрация + " (" + Строка(ДанныеСтроки.КоличествоЗарегистрированных) + ")";	
		//КонецЕсли;
	ИначеЕсли УровеньДерева < 2 Тогда
		Если ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения
			И ДанныеСтроки.КоличествоЗарегистрированных <> 0 Тогда
			
			ДанныеСтроки.Регистрация = "Зарегистрировано: " + Строка(ДанныеСтроки.КоличествоЗарегистрированных);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЗарегистрированныхОбъектовДляМетаданногоПоУзлу(МетаданныеОбъекта, УзелОбмена)
	
	Запрос = Новый Запрос();
	
	ИмяТаблицыДляПоискаЗарегистрированных = ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта);
	
	Если ПустаяСтрока(ИмяТаблицыДляПоискаЗарегистрированных) Тогда
		Возврат 0;
	КонецЕсли;
	
	ИмяТаблицыДляПоискаЗарегистрированных = ИмяТаблицыДляПоискаЗарегистрированных + "." + МетаданныеОбъекта.Имя + ".Изменения";
	
	Запрос.Текст = "ВЫБРАТЬ Количество(*) КАК Количество
	|ИЗ
	|	" + ИмяТаблицыДляПоискаЗарегистрированных + " КАК РегистрацияИзменений
	|ГДЕ
	|РегистрацияИзменений.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", УзелОбмена);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат 0;
	Иначе		
		Возврат ТаблицаДанных[0].Количество;		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта)
	
	НазваниеМетаданных = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Справочник";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Документ";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланВидовХарактеристик";
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланСчетов";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрСведений";
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланВидовРасчета";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрНакопления";
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрБухгалтерии";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрРасчета";
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "БизнесПроцесс";
		
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Задача";
		
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Константа";
		
	ИначеЕсли Метаданные.Последовательности.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Последовательность";
		
	Иначе
		
		НазваниеМетаданных = "";
		
	КонецЕсли;
	
	Возврат НазваниеМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ТабОбъектыМетаданных_НоваяСтрока(Имя, Синоним, Картинка, КартинкаОбъекта, Корень, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя 			= Имя;
	НоваяСтрока.Синоним 		= Синоним;
	НоваяСтрока.Картинка 		= Картинка;
	НоваяСтрока.КартинкаОбъекта = КартинкаОбъекта;
	НоваяСтрока.Корень 			= Корень;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеДанных(Родитель = Неопределено)
	
	Корень = ДанныеОбмена.ПолучитьЭлементы()[0];
	
	Если Родитель = Неопределено Тогда
		Родитель = ДанныеОбмена;
	КонецЕсли;
	
	ТекЭлементы = Родитель.ПолучитьЭлементы();
	
	Для Каждого ТекЭлемент ИЗ ТекЭлементы Цикл
		Родитель = ТекЭлемент.ПолучитьРодителя();
		Если НЕ (Родитель = Неопределено ИЛИ Родитель.Объект = "Общие" ИЛИ Родитель = Корень) 
			И ТекЭлемент.ПолучитьЭлементы().Количество() = 0 Тогда
			Префикс = "";
			Пока НЕ (Родитель = Неопределено ИЛИ Родитель.Объект = "Общие" ИЛИ Родитель = Корень) Цикл
				Префикс = Родитель.Объект + "." + Префикс;
				Родитель = Родитель.ПолучитьРодителя();
			КонецЦикла;
			
		КонецЕсли;
		ПолучениеДанных(ТекЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю,
	Знач Объект = Неопределено,
	Знач Поле = "",
	Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	Сообщение.УстановитьДанные(Объект);
	Сообщение.Сообщить();
	Отказ = Истина;
	
КонецПроцедуры

// Возвращает полный путь к форме внешней обработки, отчета или любого объекта метаданных в виде
// ВнешняяОбработка.ИмяВнешнейОбработки.Форма.ИмяФормы
// ВнешнийОтчет.ИмяВнешнегоОтчета.Форма.ИмяФормы
// Документ.ИмяОбъекта.Форма.ИмяФормы
//
// Параметры
//  ИмяФормы  - <Строка> - имя формы объекта
//
// Возвращаемое значение:
//   <Строка>   - полный путь к форме
//
&НаКлиенте
Функция ПолучитьПолноеИмяФормы(ИмяФормы)
	
	СимволТочка = ".";
	ПозицияПоследнейТочки = СтрДлина(ЭтаФорма.ИмяФормы);
	Пока Сред(ЭтаФорма.ИмяФормы, ПозицияПоследнейТочки, 1) <> СимволТочка Цикл ПозицияПоследнейТочки = ПозицияПоследнейТочки - 1; КонецЦикла; // 
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияПоследнейТочки) + ИмяФормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьУровень(СтрокаДерева)
	Уровень = 0;
	Родитель = ДанныеОбмена.НайтиПоИдентификатору(СтрокаДерева.ПолучитьИдентификатор()).ПолучитьРодителя();
	
	Пока Родитель <> Неопределено Цикл
		Уровень = Уровень + 1;		
		Родитель = ДанныеОбмена.НайтиПоИдентификатору(Родитель.ПолучитьИдентификатор()).ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Уровень;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьУровеньСервер(СтрокаДерева, ТаблицаДанныеОбмена)
	Уровень = 0;
	Родитель = ТаблицаДанныеОбмена.НайтиПоИдентификатору(СтрокаДерева.ПолучитьИдентификатор()).ПолучитьРодителя();
	
	Пока Родитель <> Неопределено Цикл
		Уровень = Уровень + 1;		
		Родитель = ТаблицаДанныеОбмена.НайтиПоИдентификатору(Родитель.ПолучитьИдентификатор()).ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Уровень;
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьСтрокуДереваПоМетаданным(СтрокаДерева, МетаданныеОбъекта)
	Для Каждого Эл Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если Эл.Объект = МетаданныеОбъекта.Имя Тогда
			Возврат Эл;
		КонецЕсли;
		
		Рез = ВернутьСтрокуДереваПоМетаданным(Эл, МетаданныеОбъекта);
		Если Рез <> Неопределено Тогда
			Возврат Рез;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПрефиксТипаСсылки(СтрокаДерева, Родитель)
	Если Родитель.Объект = "Справочники" Тогда
		Возврат "СправочникСсылка";
	ИначеЕсли Родитель.Объект = "Документы" Тогда
		Возврат "ДокументСсылка";
	ИначеЕсли Родитель.Объект = "ПланыВидовХарактеристик" Тогда
		Возврат "ПланВидовХарактеристикСсылка";
	ИначеЕсли Родитель.Объект = "ПланыСчетов" Тогда
		Возврат "ПланСчетовСсылка";
	ИначеЕсли Родитель.Объект = "ПланыВидовРасчета" Тогда
		Возврат "ПланВидовРасчетаСсылка";
	ИначеЕсли Родитель.Объект = "БизнесПроцессы" Тогда
		Возврат "БизнесПроцессСсылка";
	ИначеЕсли Родитель.Объект = "Задачи" Тогда
		Возврат "ЗадачаСсылка";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Возвращает описание данных по имени таблицы/полному имени метаданных или метаданным
//
//	Параметры:
//		ИмяТаблицы - Имя таблицы, например "Справочник.Валюты"
//
&НаСервереБезКонтекста
Функция ХарактеристикиПоМетаданным(ИмяТаблицыМетаданных) Экспорт
	
	ЭтоПоследовательность = Ложь;
	ЭтоКоллекция          = Ложь;
	ЭтоКонстанта 		  = Ложь;
	ЭтоСсылка    		  = Ложь;
	ЭтоНабор     		  = Ложь;
	Менеджер     		  = Неопределено;
	ИмяТаблицы   		  = "";
	
	Если ТипЗнч(ИмяТаблицыМетаданных)=Тип("Строка") Тогда
		Мета = Метаданные.НайтиПоПолномуИмени(ИмяТаблицыМетаданных);
		ИмяТаблицы = ИмяТаблицыМетаданных;
	ИначеЕсли ТипЗнч(ИмяТаблицы)=Тип("Тип") Тогда
		Мета = Метаданные.НайтиПоТипу(ИмяТаблицыМетаданных);
		ИмяТаблицы = Мета.ПолноеИмя();
	Иначе 		
		Мета = ИмяТаблицыМетаданных;
		ИмяТаблицы = Мета.ПолноеИмя();
	КонецЕсли;
	
	Если Мета=Метаданные.Константы Тогда
		ЭтоКоллекция = Истина;
		ЭтоКонстанта = Истина;
		Менеджер     = Константы;
		
	ИначеЕсли Мета=Метаданные.Справочники Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер	 = Справочники;
		
	ИначеЕсли Мета=Метаданные.Документы Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер 	 = Документы;
		
	ИначеЕсли Мета=Метаданные.Перечисления Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер 	 = Перечисления;
		
	ИначеЕсли Мета=Метаданные.ПланыВидовХарактеристик Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = ПланыВидовХарактеристик;
		
	ИначеЕсли Мета=Метаданные.ПланыСчетов Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер 	 = ПланыСчетов;
		
	ИначеЕсли Мета=Метаданные.ПланыВидовРасчета Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер 	 = ПланыВидовРасчета;
		
	ИначеЕсли Мета=Метаданные.БизнесПроцессы Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер 	 = БизнесПроцессы;
		
	ИначеЕсли Мета=Метаданные.Задачи Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер 	 = Задачи;
		
	ИначеЕсли Мета=Метаданные.Последовательности Тогда
		ЭтоНабор 			  = Истина;
		ЭтоПоследовательность = Истина;
		ЭтоКоллекция 		  = Истина;
		Менеджер 			  = Последовательности;
		
	ИначеЕсли Мета=Метаданные.РегистрыСведений Тогда
		ЭтоКоллекция = Истина;	
		ЭтоНабор     = Истина;
		Менеджер 	 = РегистрыСведений;
		
	ИначеЕсли Мета=Метаданные.РегистрыНакопления Тогда
		ЭтоКоллекция = Истина;	
		ЭтоНабор     = Истина;
		Менеджер 	 = РегистрыНакопления;
		
	ИначеЕсли Мета=Метаданные.РегистрыБухгалтерии Тогда
		ЭтоКоллекция = Истина;	
		ЭтоНабор     = Истина;
		Менеджер 	 = РегистрыБухгалтерии;
		
	ИначеЕсли Мета=Метаданные.РегистрыРасчета Тогда
		ЭтоКоллекция = Истина;	
		ЭтоНабор     = Истина;
		Менеджер 	 = РегистрыРасчета;
		
	ИначеЕсли Метаданные.Константы.Содержит(Мета) Тогда
		ЭтоКонстанта = Истина;
		Менеджер 	 = Константы[Мета.Имя];
		
	ИначеЕсли Метаданные.Справочники.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = Справочники[Мета.Имя];
		
	ИначеЕсли Метаданные.Документы.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = Документы[Мета.Имя];
		
	ИначеЕсли Метаданные.Последовательности.Содержит(Мета) Тогда
		ЭтоНабор 			  = Истина;
		ЭтоПоследовательность = Истина;
		Менеджер 			  = Последовательности[Мета.Имя];
		
	ИначеЕсли Метаданные.Перечисления.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = Перечисления[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = ПланыВидовХарактеристик[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер = ПланыСчетов[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = ПланыВидовРасчета[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыСведений[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыНакопления[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыБухгалтерии[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыРасчета[Мета.Имя];
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер = БизнесПроцессы[Мета.Имя];
		
	ИначеЕсли Метаданные.Задачи.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер = Задачи[Мета.Имя];
		
	Иначе
		МетаРодитель = Мета.Родитель();
		Если МетаРодитель<>Неопределено И Метаданные.РегистрыРасчета.Содержит(МетаРодитель) Тогда
			// Перерасчет
			ЭтоНабор = Истина;
			Менеджер = РегистрыРасчета[МетаРодитель.Имя].Перерасчеты[Мета.Имя];
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Новый Структура("ИмяТаблицы, Метаданные, Менеджер, ЭтоНабор, ЭтоСсылка, ЭтоКонстанта, ЭтоПоследовательность, ЭтоКоллекция",
		ИмяТаблицы, Мета, Менеджер, 
		ЭтоНабор, ЭтоСсылка, ЭтоКонстанта, ЭтоПоследовательность, ЭтоКоллекция
	);
	
КонецФункции	

&НаКлиенте
Функция ЗадатьВопросОПродолжении(ТекстВопроса, Уровень, ИмяМетаданных, ПроизвольнаяРегистрация, Удалить = Ложь)
	
	Если Не ВопросЗадавался Тогда
		Если ПроизвольнаяРегистрация Тогда
			СтрокаДобавленияУдаленияРегистрации = ?(Удалить, "Удалить", "Добавить произвольную");
		Иначе
			СтрокаДобавленияУдаленияРегистрации = ?(Удалить, "Удалить", "Добавить");
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяМетаданных", ИмяМетаданных);
		
		Если Уровень = 0 Тогда
			ТекстПодтверждения = СтрокаДобавленияУдаленияРегистрации + " регистрацию для всех отмеченных объектов?";
			ТекстПодтверждения = ТекстПодтверждения + Символы.ПС + ТекстВопроса;
		ИначеЕсли Уровень = 1 Тогда
			ТекстПодтверждения = СтрокаДобавленияУдаленияРегистрации + " регистрацию для всех отмеченных объектов: " + ИмяМетаданных + "?";
		Иначе
			ТекстПодтверждения = СтрокаДобавленияУдаленияРегистрации + " регистрацию для всех отмеченных объектов с типом: " + ИмяМетаданных + "?";
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТекстВопросаПользователю", ТекстПодтверждения);
		
		ВопросЗадавался = Истина;
		ФормаВопроса = ПолучитьФорму(ПолучитьПолноеИмяФормы("ФормаВыбораОбновленияРегистрации"), СтруктураПараметров, ЭтаФорма);
		РезультатОткрытия = ОткрытьФормуМодально(ФормаВопроса);
		Если ТипЗнч(РезультатОткрытия) <> Тип("Структура") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗарегистрироватьИзмененияДляДерева(ТекстВопроса, Удалить = Ложь, ПроизвольнаяРегистрация = Ложь, ТекущаяСтрока = Неопределено)
	
	Уровень = 0;
	ИмяМетаданных = "";
	ПолноеИмяМетаданных = "";
	СохраненнаяСтрока = Неопределено;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ИндексСтроки = Элементы.ДанныеОбмена.ТекущаяСтрока;
	Иначе                  
		ИндексСтроки = ТекущаяСтрока;
	КонецЕсли;  //  
	
	Если ИндексСтроки <> Неопределено Тогда
		ТекСтрока = ДанныеОбмена.НайтиПоИдентификатору(ИндексСтроки);
		Уровень = ПолучитьУровень(ТекСтрока);
	КонецЕсли;
	
	СписокОбъектовМД = Новый Массив;
	Если ПроизвольнаяРегистрация Тогда
		//Находимся в списке зарегистрированных объектов
		Если Уровень > 2 Тогда
			ТекСтрока = ТекСтрока.ПолучитьРодителя();
			Уровень = 2;
		ИначеЕсли Уровень = 1 ИЛИ Уровень = 2 Тогда
			Если Уровень = 2 Тогда
				СохраненнаяСтрока = ТекСтрока;
				ТекСтрока = ТекСтрока.ПолучитьРодителя();
				Уровень = 1;
			КонецЕсли; 
			Для каждого СтрокаДерева Из ТекСтрока.ПолучитьЭлементы() Цикл
				Если СтрокаДерева.Пометка Тогда
					СписокОбъектовМД.Добавить(СтрокаДерева.Название + "." + СтрокаДерева.Объект);
					ОтмеченнаяСтрока = СтрокаДерева;
				КонецЕсли; 
			КонецЦикла;
			Если СписокОбъектовМД.Количество() = 1 Тогда
				Уровень = 2;
				ТекСтрока = ДанныеОбмена.НайтиПоИдентификатору(ОтмеченнаяСтрока.ПолучитьИдентификатор());
			ИначеЕсли  СписокОбъектовМД.Количество() = 0 И СохраненнаяСтрока <> Неопределено Тогда 
				ТекСтрока = СохраненнаяСтрока;
				Уровень = 2;
			ИначеЕсли СписокОбъектовМД.Количество() = 0 И СохраненнаяСтрока = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяМетаданных = ТекСтрока.ОбъектПредставление;
	Если ЗначениеЗаполнено(ТекСтрока.Название) Тогда
		ПолноеИмяМетаданных = ТекСтрока.Название + "." + ТекСтрока.Объект;
	ИначеЕсли Уровень = 3 Тогда
		СтрокаРодителя = ТекСтрока.ПолучитьРодителя();
		ПолноеИмяМетаданных = СтрокаРодителя.Название + "." + СтрокаРодителя.Объект;
	КонецЕсли; 
		
	Если ПроизвольнаяРегистрация Тогда
		СтрокаДобавленияУдаленияРегистрации = ?(Удалить, "Удалить", "Добавить произвольную");
	Иначе
		СтрокаДобавленияУдаленияРегистрации = ?(Удалить, "Удалить", "Добавить");
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Уровень", Уровень);
	СтруктураПараметров.Вставить("ИмяМетаданных", ИмяМетаданных);
	СтруктураПараметров.Вставить("ПолноеИмяМетаданных", ПолноеИмяМетаданных);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("Удалить", Удалить);
	СтруктураПараметров.Вставить("УзелОбмена", УзелОбмена);
	СтруктураПараметров.Вставить("СписокОбъектовМД", СписокОбъектовМД);
	СтруктураПараметров.Вставить("ЭтоПлатформа82", ЭтоПлатформа82);
	СтруктураПараметров.Вставить("РежимСовместимости82", РежимСовместимости82);
	СтруктураПараметров.Вставить("ИспользованиеМодальности", ИспользованиеМодальности);
	
	Если Не ЗадатьВопросОПродолжении(ТекстВопроса, Уровень, ИмяМетаданных, ПроизвольнаяРегистрация, Удалить) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ПроизвольнаяРегистрация Тогда
		СтруктураПараметров.Вставить("ТекстВопросаПользователю", ТекстВопроса);
		ФормаВопроса = ПолучитьФорму(ПолучитьПолноеИмяФормы("ФормаПроизвольнойРегистрации"), СтруктураПараметров, ЭтаФорма);
		РезультатОткрытия = ОткрытьФормуМодально(ФормаВопроса);
	Иначе
		РезультатОткрытия = Новый Структура;
	КонецЕсли; 
	Если ТипЗнч(РезультатОткрытия) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаСостояние = ?(Удалить, "Удаление регистрации", "Регистрация изменений") + " для """ + ИмяМетаданных + """";
	Если ПроизвольнаяРегистрация Тогда
		ВсегоСтрок = РезультатОткрытия.Строки.Количество();
		Если ВсегоСтрок = 0 Тогда
			Возврат Ложь;
		КонецЕсли; 
		Если РезультатОткрытия.ПереданныйОбъект <> "Регистр" Тогда
			РежимВыполнения = РезультатОткрытия.РежимВыполнения;
			ТаблицаСсылок = РезультатОткрытия.Строки;
			Если РежимВыполнения = "Клиент" Тогда
				ПредПроцент = 0;
				Для сч = 0 По ВсегоСтрок - 1 Цикл
					ОбработкаПрерыванияПользователя();
					Стр = РезультатОткрытия.Строки[сч];
					Если НЕ Удалить Тогда
						ЗарегистрироватьСсылку(Стр.Ссылка, УзелОбмена, РегистрироватьДвиженияДокументов);
					Иначе
						УдалитьРегистрациюСсылки(Стр.Ссылка, УзелОбмена, РегистрироватьДвиженияДокументов);
					КонецЕсли; 
					
					Процент = сч * 100 / ВсегоСтрок;
					Если Процент > ПредПроцент Тогда
						Состояние(СтрокаСостояние, Процент,, БиблиотекаКартинок.УстановитьВремя);
						ПредПроцент = Процент;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Состояние(СтрокаСостояние, ,, БиблиотекаКартинок.УстановитьВремя);
				МассивСсылок = Новый Массив;
				Для каждого ЭлементМассива Из РезультатОткрытия.Строки Цикл
					ОбработкаПрерыванияПользователя();
					МассивСсылок.Добавить(ЭлементМассива.Ссылка);
				КонецЦикла;
				ЗарегистрироватьИзмененияПоТаблицеСсылок(МассивСсылок, Удалить, УзелОбмена, РегистрироватьДвиженияДокументов);
			КонецЕсли; 
		Иначе
			Состояние(СтрокаСостояние, ,, БиблиотекаКартинок.УстановитьВремя);
			МассивСсылок = Новый Массив;
			Для каждого ЭлементМассива Из РезультатОткрытия.Строки Цикл
				ОбработкаПрерыванияПользователя();
				МассивСсылок.Добавить(ЭлементМассива.Ссылка);
			КонецЦикла;
			РегистрацияУдалениеИзмененийНабораЗаписейПодчиненногоРегистра(ПолноеИмяМетаданных, УзелОбмена, МассивСсылок, Удалить);
		КонецЕсли;
	Иначе
		Состояние(СтрокаСостояние, ,, БиблиотекаКартинок.УстановитьВремя);
		ЗарегистрироватьИзменения(?(РежимОбновления = 0, Истина, Ложь), Удалить, ТекущаяСтрока, ПолноеИмяМетаданных);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗарегистрироватьИзмененияПоМассивуСтрок(Знач МассивСтрок, ТолькоДляОбъектовСАвтоматическойРегистрацией, Удалить, Знач ПолноеИмяМетаданных = Неопределено)
	
	Для каждого ТекущаяСтрока Из МассивСтрок Цикл
		ЗарегистрироватьИзменения(ТолькоДляОбъектовСАвтоматическойРегистрацией, Удалить, ТекущаяСтрока, ПолноеИмяМетаданных);
	КонецЦикла; //Для каждого  Из   
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьИзмененияПоТаблицеСсылок(Знач МассивСсылок, Удалить, Знач УзелОбмена, РегистрироватьДвиженияДокументов)
	
	Для каждого Ссылка Из МассивСсылок Цикл
		Если НЕ Удалить Тогда
			ЗарегистрироватьСсылку(Ссылка, УзелОбмена, РегистрироватьДвиженияДокументов);
		Иначе
			УдалитьРегистрациюСсылки(Ссылка, УзелОбмена, РегистрироватьДвиженияДокументов);
		КонецЕсли; 
	КонецЦикла; //Для каждого  Из   
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьИзменения(ТолькоДляОбъектовСАвтоматическойРегистрацией, Удалить, ТекущаяСтрока = Неопределено, Знач ПолноеИмяМетаданных = Неопределено)
	
	Уровень = 0;
	Если ТекущаяСтрока = Неопределено Тогда
		ИндексСтроки = Элементы.ДанныеОбмена.ТекущаяСтрока;
	Иначе                  
		ИндексСтроки = ТекущаяСтрока;
	КонецЕсли;  //  
	Если ИндексСтроки <> Неопределено Тогда
		ТекСтрока = ДанныеОбмена.НайтиПоИдентификатору(ИндексСтроки);
		Уровень = ПолучитьУровеньСервер(ТекСтрока, ДанныеОбмена);
	КонецЕсли;
	
	Если Уровень = 0 Тогда
		ДеревоОбмена = РеквизитФормыВЗначение("ДанныеОбмена");
		Для Каждого СтрокаДерева Из ДеревоОбмена.Строки Цикл
			Для Каждого СтрокаМетаданных Из СтрокаДерева.Строки Цикл
				Для Каждого СтрокаТипаДанных Из СтрокаМетаданных.Строки Цикл
					Если ТолькоДляОбъектовСАвтоматическойРегистрацией И СтрокаТипаДанных.РежимАвтоРегистрации = Ложь Тогда
						Продолжить;
					КонецЕсли;
					РегистрацияУдалениеИзменений(СтрокаТипаДанных, Удалить, УзелОбмена, ДатаНачала, ДатаОкончания, РегистрироватьДвиженияДокументов);
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Уровень = 1 Тогда
		ДеревоОбмена = РеквизитФормыВЗначение("ДанныеОбмена");
		НайденнаяСтрока = ДеревоОбмена.Строки[0].Строки.Найти(ТекСтрока.Объект).Строки;
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокиТекущейСтроки = НайденнаяСтрока;
			Для Каждого СтрокаТипаДанных Из СтрокиТекущейСтроки Цикл
				Если ТолькоДляОбъектовСАвтоматическойРегистрацией И СтрокаТипаДанных.РежимАвтоРегистрации = Ложь Тогда
					Продолжить;
				КонецЕсли;
				РегистрацияУдалениеИзменений(СтрокаТипаДанных, Удалить, УзелОбмена, ДатаНачала, ДатаОкончания, РегистрироватьДвиженияДокументов);
			КонецЦикла;	
		КонецЕсли; 
	ИначеЕсли Уровень = 2 Тогда
		Если ТолькоДляОбъектовСАвтоматическойРегистрацией И ТекСтрока.РежимАвтоРегистрации = Ложь Тогда
			Возврат;
		КонецЕсли;
		РегистрацияУдалениеИзменений(ТекСтрока, Удалить, УзелОбмена, ДатаНачала, ДатаОкончания, РегистрироватьДвиженияДокументов);
	ИначеЕсли Уровень = 3 И Удалить  Тогда
		Если ТолькоДляОбъектовСАвтоматическойРегистрацией И ТекСтрока.РежимАвтоРегистрации = Ложь Тогда
			Возврат;
		КонецЕсли;
		ОписаниеМетаданных = ХарактеристикиПоМетаданным(ПолноеИмяМетаданных);
		Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
			УдалитьРегистрациюСсылки(ТекСтрока.СсылкаНаОбъект, УзелОбмена, ?(ОписаниеМетаданных.ЭтоНабор, Истина, РегистрироватьДвиженияДокументов));
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ЗначениеОтбора) Тогда
			УдалитьРегистрациюНабораЗаписей(ОписаниеМетаданных, ТекСтрока.ЗначениеОтбора, УзелОбмена)
		КонецЕсли;  //  
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьРегистрациюСсылки(Ссылка, УзелОбмена, РегистрироватьДвиженияДокументов)
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Если РегистрироватьДвиженияДокументов Тогда
		ОбъектСсылка = Ссылка.ПолучитьОбъект();
		Если ОбъектСсылка <> Неопределено И Метаданные.Документы.Содержит(Ссылка.Метаданные()) Тогда
			ДвиженияОбъекта = ОбъектСсылка.Движения;
			Для Каждого НаборЗаписей Из ДвиженияОбъекта Цикл
				Если СоставПланаОбмена.Содержит(НаборЗаписей.Метаданные()) Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НаборЗаписей);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	Если СоставПланаОбмена.Содержит(Ссылка.Метаданные()) Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьРегистрациюНабораЗаписей(ОписаниеМетаданных, Знач Отбор, УзелОбмена)
	
	Если ТипЗнч(Отбор) = Тип("Строка") Тогда
		Отбор = ЗначениеИзСтрокиВнутр(Отбор);
	КонецЕсли; 
	НаборЗаписей = ОписаниеМетаданных.Менеджер.СоздатьНаборЗаписей();
	Для каждого ЭлементОтбора Из Отбор Цикл    
		НаборЗаписей.Отбор[ЭлементОтбора.Имя].Установить(ЭлементОтбора.Значение);
	КонецЦикла; //Для каждого  Из  
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НаборЗаписей);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСсылку(Ссылка, УзелОбмена, РегистрироватьДвиженияДокументов)
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Ссылка);
	Если РегистрироватьДвиженияДокументов Тогда
		ОбъектСсылка = Ссылка.ПолучитьОбъект();
		Если ОбъектСсылка <> Неопределено И Метаданные.Документы.Содержит(Ссылка.Метаданные()) Тогда
			СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
			ДвиженияОбъекта = ОбъектСсылка.Движения;
			Для Каждого НаборЗаписей Из ДвиженияОбъекта Цикл
				ДвиженияМетаданные = НаборЗаписей.Метаданные();
				Если СоставПланаОбмена.Содержит(ДвиженияМетаданные) Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, НаборЗаписей);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РегистрацияУдалениеИзмененийПоМетаданным(МетаданныеОбъекта, УзелОбмена, Удалить)
	Если Удалить Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, МетаданныеОбъекта);
	Иначе
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, МетаданныеОбъекта);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РегистрацияУдалениеИзмененийНабораЗаписейПодчиненногоРегистра(ПолноеИмяМетаданных, УзелОбмена, МассивСсылок, Удалить)
	
	ОписаниеМетаданных = ХарактеристикиПоМетаданным(ПолноеИмяМетаданных);
	
	Для Каждого ЭлементМассива Из МассивСсылок Цикл
		НаборЗаписей = ОписаниеМетаданных.Менеджер.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["Регистратор"].Установить(ЭлементМассива);
		Если Удалить Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НаборЗаписей);
		Иначе
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, НаборЗаписей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РегистрацияУдалениеИзменений(СтрокаТипаДанных, Удалить, УзелОбмена, ДатаНачала = "", ДатаОкончания = "", РегистрироватьДвиженияДокументов = Истина)
	ПолноеИмяМетаданных = СтрокаТипаДанных.Название + "." + СтрокаТипаДанных.Объект;
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			РегистрацияУдалениеИзмененийПоМетаданным(МетаданныеОбъекта, УзелОбмена, Удалить);
		Иначе                  
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Документы.Ссылка
						   |ИЗ
			               |	&ВидДокумента КАК Документы
			               |ГДЕ
			               |	Документы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			               |СГРУППИРОВАТЬ ПО
			               |	Документы.Ссылка.Дата,
			               |	Документы.Ссылка";
						   
			Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
				Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
				Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
			ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда 
				Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "МЕЖДУ &ДатаНачала И &ДатаОкончания", ">= &ДатаНачала");
			ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда 
				Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "МЕЖДУ &ДатаНачала И &ДатаОкончания", "<= &ДатаОкончания");
			КонецЕсли;  //  
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидДокумента", ПолноеИмяМетаданных + ?(Удалить, ".Изменения", ""));
			Если Удалить Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ
									|	Документы.Узел = &УзелОбмена И ");
				Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
			КонецЕсли; 
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не Удалить Тогда
					ЗарегистрироватьСсылку(Выборка.Ссылка, УзелОбмена, РегистрироватьДвиженияДокументов);
				Иначе                  
					УдалитьРегистрациюСсылки(Выборка.Ссылка, УзелОбмена, РегистрироватьДвиженияДокументов);
				КонецЕсли;  //  
			КонецЦикла;
			
		КонецЕсли;  //  
	Иначе
		РегистрацияУдалениеИзмененийПоМетаданным(МетаданныеОбъекта, УзелОбмена, Удалить);
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РегистрацияУдалениеРегистрацииПолнаяСервер(УзелОбмена, Регистрация = Истина)
	
	Если Регистрация Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена);
	Иначе
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
	КонецЕсли; 
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ИзменитьРеквизитОбъектаНаСервере(УзелОбмена, ИмяРеквизита, ЗначениеРеквизита, ТекстСообщения = "")
	
	УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
	
	Попытка
		УзелОбменаОбъект[ИмяРеквизита] = ЗначениеРеквизита;
		УзелОбменаОбъект.Записать();
	Исключение
		ТекстСообщения = СтрЗаменить(НСтр("ru = '%1'"), "%1", "Неудачная попытка записи: " + ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУзловОбменаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяКолонки = СтрЗаменить(Поле.Имя, Элемент.Имя, "");
	ТекущееЗначение = Элемент.ТекущиеДанные[ИмяКолонки];
	
	Если НЕ (ИмяКолонки = "НомерПринятого" ИЛИ ИмяКолонки = "НомерОтправленного" ИЛИ ИмяКолонки = "Код") Тогда
		Если Найти(ИмяКолонки, "Дата") <> 0 Тогда
			ТекущееЗначение = Элемент.ТекущиеДанные.Ссылка;
		КонецЕсли; 
		ПоказатьЗначениеУниверсальное(ТекущееЗначение);
		Элементы.СписокУзловОбмена.Обновить();
		Возврат;
	КонецЕсли;	
	
	ВведенноеЗначение = ТекущееЗначение;
	Если Не ВвестиЗначение(ВведенноеЗначение, НСтр("ru = 'Введите новое значение: '") + Поле.Заголовок) Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ТекущееЗначение) = Тип("Число") Тогда
		Если ВведенноеЗначение < 0 Тогда
			Возврат;
		КонецЕсли; 
	Иначе
		Если Не ЗначениеЗаполнено(ВведенноеЗначение) Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	Если ВведенноеЗначение = ТекущееЗначение Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстСообщения = "";
	ИзменитьРеквизитОбъектаНаСервере(ВыбраннаяСтрока, ИмяКолонки, ВведенноеЗначение, ТекстСообщения);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		СообщитьПользователю(ТекстСообщения, Объект, Элемент.Имя);
	Иначе 
		ОповеститьОбИзменении(ВыбраннаяСтрока);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для вложенных элементов начиная
// с передваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьВложенныеЭлементы(Элемент)

	ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
	
	Для Каждого ВложенныйЭлемент ИЗ ВложенныеЭлементы Цикл
		ВложенныйЭлемент.Пометка = Элемент.Пометка;
		ПометитьВложенныеЭлементы(ВложенныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для родителей передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьЭлементыРодителей(Элемент)

	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.Пометка Тогда
		Родитель.Пометка = Элемент.Пометка;

		ПометитьЭлементыРодителей(Родитель);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	ПометитьВложенныеЭлементы(ТекущиеДанные);
	ПометитьЭлементыРодителей(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыбранныеСтроки()

	МассивВыбранныеСтроки = Новый Массив;
	ЭлементыДерева = ДанныеОбмена.ПолучитьЭлементы();
	Если ЭлементыДерева[0].Пометка Тогда
		ЭлементыДерева = ЭлементыДерева[0].ПолучитьЭлементы();
		Для каждого СтрокаРодитель Из ЭлементыДерева Цикл
			Если Не СтрокаРодитель.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементыРодителя = СтрокаРодитель.ПолучитьЭлементы();
			Для Каждого ТекущаяСтрокаРодителя Из ЭлементыРодителя Цикл
				Если Не ТекущаяСтрокаРодителя.Пометка Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементыОбъектов = ТекущаяСтрокаРодителя.ПолучитьЭлементы();
				Если ЭлементыОбъектов.Количество() > 0 Тогда
					Для Каждого ТекущаяСтрокаОбъектов Из ЭлементыОбъектов Цикл
						Если Не ТекущаяСтрокаОбъектов.Пометка Тогда
							Продолжить;
						КонецЕсли;
						МассивВыбранныеСтроки.Добавить(ТекущаяСтрокаОбъектов.ПолучитьИдентификатор());
					КонецЦикла;
				Иначе
					МассивВыбранныеСтроки.Добавить(ТекущаяСтрокаРодителя.ПолучитьИдентификатор());
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли; 
	
	Если МассивВыбранныеСтроки.Количество() = 0 Тогда
		Если Элементы.ДанныеОбмена.ВыделенныеСтроки.Количество() = 1 Тогда
			ТекСтрока = ДанныеОбмена.НайтиПоИдентификатору(Элементы.ДанныеОбмена.ВыделенныеСтроки[0]);
			Если ПолучитьУровень(ТекСтрока) = 2 Тогда
				МассивВыбранныеСтроки.Добавить(Элементы.ДанныеОбмена.ВыделенныеСтроки[0]);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат МассивВыбранныеСтроки;
	
КонецФункции // ПолучитьВыбранныеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОткрытиеФормы = Истина;
	
	Для каждого МетаданныеПланаОбмена Из Метаданные.ПланыОбмена Цикл
		Элементы.ТекущийПланОбмена.СписокВыбора.Добавить(МетаданныеПланаОбмена.Имя, МетаданныеПланаОбмена.Синоним);
	КонецЦикла; //Для каждого ПланОбмена Из  
	
	Если Элементы.ТекущийПланОбмена.СписокВыбора.Количество() > 0 Тогда
		Команда = ЭтаФорма.Команды.Найти("ВыполнитьОбменДанными");
		Если ЕстьРеквизитОбъекта(БиблиотекаКартинок, "СинхронизацияДанныхВыполнение") Тогда
			Выполнить("Команда.Картинка = БиблиотекаКартинок.СинхронизацияДанныхВыполнение;");
			Команда.Заголовок = НСтр("ru = 'Синхронизировать данные'");
			Команда.Подсказка = НСтр("ru = 'Синхронизировать данные автоматически'");
		Иначе
			Команда.Картинка = БиблиотекаКартинок.СформироватьОтчет;
			Команда.Заголовок = НСтр("ru = 'Выполнить обмен'");
			Команда.Подсказка = НСтр("ru = 'Выполнить обмен данными с информационной базой'");
		КонецЕсли; 
	КонецЕсли; 
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ЭтоПлатформа82 = (Лев(СисИнфо.ВерсияПриложения, 4) = "8.2.");
	ИспользованиеМодальности = Истина;
	РежимСовместимости82 = Истина;
	Если НЕ ЭтоПлатформа82 Тогда
		ИспользованиеМодальности = (Метаданные.РежимИспользованияМодальности <> Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.НеИспользовать 
					И Метаданные.РежимИспользованияМодальности <> Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.ИспользоватьСПредупреждениями);
		РежимСовместимости82 = Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1 
						ИЛИ Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
						ИЛИ Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_16;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.ТекущийПланОбмена.СписокВыбора.Количество() = 0 Тогда
		ПоказатьПредупреждениеУниверсальное(НСтр("ru = 'В конфигурации отсутствуют планы обмена!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ". " + Объект.Версия;
	ПериодОтбора.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
	Если Режим = Неопределено Тогда
		РежимОбновления = 1;
	КонецЕсли;
	
	ЗаполнитьСписокУзловОбмена();
	Если ЗначениеЗаполнено(ТекущийПланОбмена) Тогда
		ДанныеОбменаЗаполнить();
		РазвернутьДерево();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Режим = Настройки["РежимОбновления"];
	Если Режим = Неопределено Тогда
		РежимОбновления = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если    ИмяСобытия = "ВыполненОбменДанными"
		ИЛИ ИмяСобытия = "Запись_СценарииОбменовДанными"
		ИЛИ ИмяСобытия = "Запись_УзелПланаОбмена"
		ИЛИ ИмяСобытия = "ЗакрытаФормаПомощникаСопоставленияОбъектов"
		ИЛИ ИмяСобытия = "ЗакрытаФормаПомощникаСозданияОбменаДанными"
		ИЛИ ИмяСобытия = "ЗакрытаФормаРезультатовОбменаДанными" Тогда
		
		// обновляем данные монитора
		Элементы.СписокУзловОбмена.Обновить();
		Если ЗначениеЗаполнено(ТекущийПланОбмена) Тогда
			ДанныеОбменаЗаполнить();
			РазвернутьДерево();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекУправлениеРегистрациейИзменений" 
		И Найти(Источник.ИмяФормы, ".ФормаНастроекУправляемая") <> 0 Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура УзелОбменаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УзелОбмена = Неопределено;
	ПерезаполнитьДеревоОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУзловОбменаПриАктивизацииСтроки(Элемент)
	
	Если ОткрытиеФормы Тогда
		ОткрытиеФормы = Ложь;
		Возврат;
	КонецЕсли; 
	
	ПерезаполнитьДеревоОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланОбменаПриИзменении(Элемент)
	
	ЗаполнитьСписокУзловОбмена();
	Если ЗначениеЗаполнено(ТекущийПланОбмена) Тогда
		Элементы.УзелОбмена.ОграничениеТипа = Новый ОписаниеТипов("ПланОбменаСсылка." + ТекущийПланОбмена);
		УзелОбмена = Элементы.УзелОбмена.ОграничениеТипа.ПривестиЗначение(УзелОбмена);
		ДанныеОбменаЗаполнить();
		РазвернутьДерево();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОбменаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СсылкаНаОбъект) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначениеУниверсальное(ТекущиеДанные.СсылкаНаОбъект);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора) Тогда
		
		ИмяРегистра = Сред(ТекущиеДанные.ОбъектИмя, Найти(ТекущиеДанные.ОбъектИмя, ".") + 1); 
		ПараметрыФормы = ПолучитьСтруктуруПараметровДляРегистра(ИмяРегистра, ТекущиеДанные.ЗначениеОтбора);
		// открываем форму записи РС
		ОткрытьФорму("РегистрСведений." + ИмяРегистра + ".ФормаЗаписи", ПараметрыФормы);
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьОбъектыОбработчик(ОтветНаВопрос, Параметры) Экспорт
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда 
		ПоказатьОбъекты(Параметры.ИндексСтроки, Параметры.Уровень);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеОбъекты(Команда)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ПоказатьПредупреждениеУниверсальное(НСтр("ru = 'Не указан текущий узел обмена.'"));
		Возврат;
	КонецЕсли; 
	
	Уровень = 0;
	ИмяМетаданных = "";
	ПолноеИмяМетаданных = "";
	
	ИндексСтроки = Элементы.ДанныеОбмена.ТекущаяСтрока;
	Если ИндексСтроки <> Неопределено Тогда
		ТекСтрока = ДанныеОбмена.НайтиПоИдентификатору(ИндексСтроки);
		Уровень = ПолучитьУровень(ТекСтрока);
		ИмяМетаданных = ТекСтрока.ОбъектПредставление;
		ПолноеИмяМетаданных = ТекСтрока.Название + "." + ТекСтрока.Объект;
	КонецЕсли;
	
	Если Уровень = 0 Тогда
		ТекстВопроса = НСтр("ru = 'Показать все зарегистрированные объекты?'");
	ИначеЕсли Уровень = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Показать все зарегистрированные объекты: %1?'");
	ИначеЕсли Уровень = 2 Тогда
		ТекстВопроса = НСтр("ru = 'Показать все зарегистрированные объекты с типом: %1?'");
	Иначе
		ТекСтрока = ТекСтрока.ПолучитьРодителя();
		ИндексСтроки = ТекСтрока.ПолучитьИдентификатор();
		ИмяМетаданных = ТекСтрока.ОбъектПредставление;
		Уровень = 2;
		ТекстВопроса = НСтр("ru = 'Показать все зарегистрированные объекты с типом: %1?'");
	КонецЕсли;
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ИмяМетаданных);
	
	ПараметрыПодтверждения = Новый Структура("ИндексСтроки, Уровень", ИндексСтроки, Уровень);
	
	Если ЭтоПлатформа82 ИЛИ ИспользованиеМодальности ИЛИ РежимСовместимости82 Тогда
		ОтветНаВопрос = Неопределено;
		Выполнить("ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);");
		ПоказатьОбъектыОбработчик(ОтветНаВопрос, ПараметрыПодтверждения);
	Иначе
		Выполнить("
		|Оповещение = Новый ОписаниеОповещения(""ПоказатьОбъектыОбработчик"", ЭтаФорма, ПараметрыПодтверждения);
		|ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		|");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьОбъекты(Команда)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ПоказатьПредупреждениеУниверсальное(НСтр("ru = 'Не указан текущий узел обмена.'"));
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Зарегистрировать изменения для всех объектов, участвующих в обмене?'");
	
	ВопросЗадавался = Ложь;
	РезультатыРегистрации = Ложь;
	
	МассивВыбранныеСтроки = ПолучитьВыбранныеСтроки();
	
	Если МассивВыбранныеСтроки.Количество() > 0 Тогда
		Для каждого ТекущаяСтрока Из МассивВыбранныеСтроки Цикл
			ОбработкаПрерыванияПользователя();
			РезультатРегистрации = ЗарегистрироватьИзмененияДляДерева(ТекстВопроса, , , ТекущаяСтрока);
			Если РезультатРегистрации Тогда
				РезультатыРегистрации = Истина;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	Если РезультатыРегистрации Тогда
		ДанныеОбменаЗаполнить();
		РазвернутьДерево();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПоОдному(Команда)
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ПоказатьПредупреждениеУниверсальное(НСтр("ru = 'Не указан текущий узел обмена.'"));
		Возврат;
	КонецЕсли;
	
	РезультатРегистрации = ЗарегистрироватьИзмененияДляДерева("",, Истина);
	
	Если РезультатРегистрации Тогда
		ДанныеОбменаЗаполнить();
		РазвернутьДерево();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольноеУдалениеРегистрации(Команда)
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ПоказатьПредупреждениеУниверсальное(НСтр("ru = 'Не указан текущий узел обмена.'"));
		Возврат;
	КонецЕсли;
	
	РезультатРегистрации = ЗарегистрироватьИзмененияДляДерева("", Истина, Истина);
	
	Если РезультатРегистрации Тогда
		ДанныеОбменаЗаполнить();
		РазвернутьДерево();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрациюОбъектов(Команда)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ПоказатьПредупреждениеУниверсальное(НСтр("ru = 'Не указан текущий узел обмена.'"));
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Операция удаления регистрации всех изменений необратима.
				|Удалить регистрацию изменений для всех объектов, участвующих в обмене?'");
	ВопросЗадавался = Ложь;
	РезультатыРегистрации = Ложь;
	
	МассивВыбранныеСтроки = ПолучитьВыбранныеСтроки();
	
	ИндексСтроки = Элементы.ДанныеОбмена.ТекущаяСтрока;
	Если ИндексСтроки <> Неопределено Тогда
		ТекСтрока = ДанныеОбмена.НайтиПоИдентификатору(ИндексСтроки);
		Уровень = ПолучитьУровень(ТекСтрока);
	КонецЕсли;
	
	Если МассивВыбранныеСтроки.Количество() > 0 Тогда
		Если Уровень = 3 Тогда
			СтрокаРодителя = ТекСтрока.ПолучитьРодителя();
			ИмяМетаданных = СтрокаРодителя.ОбъектПредставление;
			ПолноеИмяМетаданных = СтрокаРодителя.Название + "." + СтрокаРодителя.Объект;
			Если Не ЗадатьВопросОПродолжении(ТекстВопроса, Уровень, ИмяМетаданных, Ложь, Истина) Тогда
				Возврат;
			КонецЕсли; 
			СтрокаСостояние = "Удаление регистрации" + " для """ + ИмяМетаданных + """";
			Состояние(СтрокаСостояние, ,, БиблиотекаКартинок.УстановитьВремя);
			ЗарегистрироватьИзмененияПоМассивуСтрок(МассивВыбранныеСтроки, ?(РежимОбновления = 0, Истина, Ложь), Истина, ПолноеИмяМетаданных);
			РезультатыРегистрации = Истина;
		Иначе
			Для каждого ТекущаяСтрока Из МассивВыбранныеСтроки Цикл
				РезультатРегистрации = ЗарегистрироватьИзмененияДляДерева(ТекстВопроса, Истина, , ТекущаяСтрока);
				Если РезультатРегистрации Тогда
					РезультатыРегистрации = Истина;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	
	Если РезультатыРегистрации Тогда
		ДанныеОбменаЗаполнить();
		РазвернутьДерево();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрациюОбъектовПолная(Команда)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ПоказатьПредупреждениеУниверсальное(НСтр("ru = 'Не указан текущий узел обмена.'"));
		Возврат;
	КонецЕсли;
	
	РегистрацияУдалениеРегистрацииПолнаяСервер(УзелОбмена, Ложь);
	
	ДанныеОбменаЗаполнить();
	РазвернутьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВсеОбъектыПолная(Команда)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ПоказатьПредупреждениеУниверсальное(НСтр("ru = 'Не указан текущий узел обмена.'"));
		Возврат;
	КонецЕсли;
	
	РегистрацияУдалениеРегистрацииПолнаяСервер(УзелОбмена, Истина);
	
	ДанныеОбменаЗаполнить();
	РазвернутьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИзменения(Команда)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ПоказатьПредупреждениеУниверсальное(НСтр("ru = 'Не указан текущий узел обмена.'"));
		Возврат;
	КонецЕсли;
	
	ДанныеОбменаЗаполнить();
	РазвернутьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбработки(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗагружатьИзменения", ЗагружатьИзменения);
	СтруктураПараметров.Вставить("ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения", ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения);
	СтруктураПараметров.Вставить("РегистрироватьДвиженияДокументов", РегистрироватьДвиженияДокументов);
	СтруктураПараметров.Вставить("РежимОбновления", РежимОбновления);
	
	ФормаНастроек = ПолучитьФорму(ПолучитьПолноеИмяФормы("ФормаНастроекУправляемая"), СтруктураПараметров, ЭтаФорма);
	ОткрытьФорму(ФормаНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодОбработчик(Период, Параметры) Экспорт
	Если Период <> Неопределено Тогда 
	    ПериодОтбора = Период;
		ДатаНачала = ПериодОтбора.ДатаНачала;
		ДатаОкончания = ПериодОтбора.ДатаОкончания;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если Не ЗначениеЗаполнено(ПериодОтбора.ДатаНачала) Тогда
		ПериодОтбора.ДатаНачала = ДатаНачала;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПериодОтбора.ДатаОкончания) Тогда
		ПериодОтбора.ДатаОкончания = КонецДня(ДатаОкончания);
	КонецЕсли; 
	Диалог.Период = ПериодОтбора;
	
	Если ЭтоПлатформа82 ИЛИ ИспользованиеМодальности ИЛИ РежимСовместимости82 Тогда
		Результат = Ложь;
		Выполнить("Результат = Диалог.Редактировать();");
		Если Результат Тогда
			УстановитьПериодОбработчик(Диалог.Период, Неопределено);
		КонецЕсли; 
	Иначе
		Выполнить("
		|Оповещение = Новый ОписаниеОповещения(""УстановитьПериодОбработчик"", ЭтаФорма);
		|Диалог.Показать(Оповещение);
		|");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменДанными(Команда)
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭтотУзелПланаОбмена = УзелОбмена Тогда
		ПоказатьПредупреждениеУниверсальное(НСтр("ru = 'Выбран предопределённый узел обмена.'"));
	Иначе
		Если ЕстьОбщийМодуль("ОбменДаннымиКлиент") Тогда
			Выполнить("ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(УзелОбмена, ЭтаФорма);");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

//Процедура-обработчик команды "Проголосовать"
//
&НаКлиенте
Процедура Проголосовать(Команда)
	
	ЗапуститьПриложение("http://infostart.ru/public/121248/?rate=1");
	
КонецПроцедуры