Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.3.1.73");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Универсальный передаточный документ (УПД) без группировки'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
	ПараметрыРегистрации.Версия = "1.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;

	ПараметрыРегистрации.Назначение.Добавить("Документ.ВозвратТоваровПоставщику");
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД) без группировки'");
	Команда.Идентификатор = "УПД";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Истина;

	Возврат ПараметрыРегистрации;
КонецФункции

// Интерфейс для выполнения команд обработки.
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ПараметрыПечати = Новый Структура;
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УПД") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"УПД",
			"Универсальный передаточный документ (УПД)",
			СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПД";
	
	СтруктураТиповНаПечать              = Новый Структура;
	МассивСчетФактураВыданный           = Новый Массив;
	МассивСчетФактураПолученный         = Новый Массив;
	ОснованияНаРеализацию               = Новый Массив;
	ОснованияСчетФактураПолученный      = Новый Массив;
	ДокументыБезВыданногоСчетаФактуры   = Новый Массив;
	ДокументыБезПолученногоСчетаФактуры = Новый Массив;
	
	Если ПараметрыПечати = Неопределено Тогда
		ПараметрыПечати = Новый Структура;
	КонецЕсли;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);
		
		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяОбъекта = "СчетФактураВыданный" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
				И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОснованияНаРеализацию.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(ОснованияНаРеализацию);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(ОснованияСчетФактураПолученный);
		
		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезПолученногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;
	
	Для Каждого Документ Из ДокументыБезВыданногоСчетаФактуры Цикл
		
		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			СтруктураТиповНаПечать[ИмяОбъекта].Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Истина);
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати);
		
	КонецЦикла;
	
	СтруктураТиповНаПечать.Очистить();
	Для Каждого Документ Из ДокументыБезПолученногоСчетаФактуры Цикл
		
		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			СтруктураТиповНаПечать[ИмяОбъекта].Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Ложь);
		ПараметрыПечати.Вставить("НеВыводитьОсновнойУПД", Истина);
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл", ПараметрыЗаполнения.ПересчитыватьВВалютуРегл);
	Запрос.УстановитьПараметр("ВключаяНомераГТД",         ПараметрыЗаполнения.ВключаяНомераГТД);
	Запрос.УстановитьПараметр("ПустаяГТД",                Справочники.НомераГТД.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаТоваров.Ссылка КАК Ссылка,
	               |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	               |	ТаблицаТоваров.Характеристика КАК Характеристика,
	               |	ТаблицаТоваров.Серия КАК Серия,
	               |	ТаблицаТоваров.Упаковка КАК Упаковка,
	               |	ТаблицаТоваров.Цена КАК Цена,
	               |	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ СтрокиТоваров
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТоваров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	               |		ПО ТаблицаТоваров.Ссылка = ДанныеДокументов.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТаблицаТоваров.Ссылка,
	               |	ТаблицаТоваров.Номенклатура,
	               |	ТаблицаТоваров.Характеристика,
	               |	ТаблицаТоваров.Серия,
	               |	ТаблицаТоваров.Упаковка,
	               |	ТаблицаТоваров.Цена
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВозвратТоваровПоставщикуТовары.Ссылка КАК Ссылка,
	               |	СтрокиТоваров.НомерСтроки КАК НомерСтроки,
	               |	Аналитика.Номенклатура КАК Номенклатура,
	               |	Аналитика.Характеристика КАК Характеристика,
	               |	Аналитика.Серия КАК Серия,
	               |	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	               |	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	               |	ВозвратТоваровПоставщикуТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл, ВозвратТоваровПоставщикуТовары.СуммаСНДС - ВозвратТоваровПоставщикуТовары.СуммаНДС) КАК СуммаБезНДС,
	               |	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаНДСРегл, ВозвратТоваровПоставщикуТовары.СуммаНДС) КАК СуммаНДС,
	               |	ИСТИНА КАК ЭтоТовар,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.ПредусмотренЗалогЗаТару КАК ВернутьМногооборотнуюТару,
	               |	ВозвратТоваровПоставщикуТовары.Упаковка КАК Упаковка,
	               |	&ПустаяГТД КАК НомерГТД
	               |ПОМЕСТИТЬ ВозвратТоваровПоставщикуТаблицаТоваров
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	               |		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ДанныеДокументов.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	               |		ПО ВозвратТоваровПоставщикуТовары.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	               |			И ВозвратТоваровПоставщикуТовары.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	               |			И (СуммыДокументовВВалютеРегл.Активность)
	               |			И (&ПересчитыватьВВалютуРегл)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	               |		ПО ВозвратТоваровПоставщикуТовары.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиТоваров КАК СтрокиТоваров
	               |		ПО ВозвратТоваровПоставщикуТовары.Ссылка = СтрокиТоваров.Ссылка
	               |			И (Аналитика.Номенклатура = СтрокиТоваров.Номенклатура)
	               |			И (Аналитика.Характеристика = СтрокиТоваров.Характеристика)
	               |			И (Аналитика.Серия = СтрокиТоваров.Серия)
	               |			И ВозвратТоваровПоставщикуТовары.Упаковка = СтрокиТоваров.Упаковка
	               |			И ВозвратТоваровПоставщикуТовары.НомерСтроки = СтрокиТоваров.НомерСтроки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ СтрокиТоваров";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати = Неопределено) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МакетУПД = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент");
	МакетУПД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_625");
	МакетУПД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент981");
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаОснований = Неопределено;
	КонецЕсли;
	
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = Неопределено;
			
			Если ВыборкаОснований <> Неопределено Тогда
				
				СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
				ВыборкаОснований.НайтиСледующий(СтруктураПоиска);
				СтрокиОснований = ВыборкаОснований.Выбрать();
			
				Если СтрокиОснований.Следующий() Тогда
					КомплектПечатиПоСсылке = КомплектыПечати.Найти(СтрокиОснований.ДокументОснование, "Ссылка");
				КонецЕсли;
				
			Иначе
				КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеПечати.СтатусУПД = 2
			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			И НЕ ДанныеПечати.ЭтоПередачаНаКомиссию Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен %2'"),
				ДанныеПечати.Ссылка,
				ДанныеПечати.ПредставлениеДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка,
				,
				"ТекстСчетФактура");
				
			Продолжить;
		КонецЕсли;
		
		Если ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_981;
			ЕстьПостановление981 = Истина;
		ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_625;
			ЕстьПостановление1137_625 = Истина;
		Иначе
			Макет = МакетУПД;
			ЕстьПостановление1137 = Истина;
		КонецЕсли;
		
		Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
				|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
				|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		СведенияОКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, СведенияОКонтрагенте, Макет, ТабличныйДокумент);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		НомерСтраницы = 1;
		
		// Инициализация итогов в документе
		ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьСтрокаСтандарт = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвал, ДанныеПечати, СведенияОбОрганизации, СведенияОКонтрагенте);
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
			ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
		КонецЕсли;
		
		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981);
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		ТолькоСтавкаБезНДС = Истина;
		НомерСтроки = 0;
		Пока СтрокаТовары.Следующий() Цикл
			
			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
				ИЛИ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
					И СтрокаТовары.Покупатель <> НЕОПРЕДЕЛЕНО Тогда
						Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаНабор;
			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаКомплектующие;
			Иначе
				ОбластьСтрока = ОбластьСтрокаСтандарт;
			КонецЕсли;
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, Неопределено, , ВыводитьКодыТНВЭД);
			Иначе
				НомерСтроки = НомерСтроки + 1;
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД);
				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			Если СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='без НДС'"));
				СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru='без НДС'"));
			ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтруктураПараметров.Вставить("СуммаНДС", 0);
				ТолькоСтавкаБезНДС = Ложь;
			Иначе
				ТолькоСтавкаБезНДС = Ложь;
			КонецЕсли;
			Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				СтруктураПараметров.Вставить("Акциз", НСтр("ru='без акциза'"));
			КонецЕсли;
			ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьИтого);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
				ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
				ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
				ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
				
				ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
			КонецЕсли;
		КонецЦикла;
		// Выводим итоги по документу
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
		
		Если ТолькоСтавкаБезНДС Тогда
			ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru='без НДС'");
		КонецЕсли;
		ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
		ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ составлен на %1 %2'"),
			НомерСтраницы,
			ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), НомерСтраницы));
		СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
		ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеПечати.Ссылка);
			
	КонецЦикла;
	
КонецПроцедуры

Функция ДействуетПостановление981(ДатаДокумента, ДатаИсправления)
	
	НачалоПрименения = '20171001';
	
	Дата = ?(ЗначениеЗаполнено(ДатаИсправления),ДатаИсправления,ДатаДокумента);
	
	Если Дата < НачалоПрименения Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ВедетсяУчетНДСПоФЗ56(ДатаДокумента, ДатаИсправления)
	
	НачалоПримененияФЗ56 = '20170701';
	
	Дата = ?(ЗначениеЗаполнено(ДатаИсправления),ДатаИсправления,ДатаДокумента);
	
	Если Дата < НачалоПримененияФЗ56 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОПоставщике, СведенияОПокупателе, Макет, ТабличныйДокумент)
	
	СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
	СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,
		ДанныеПечати.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета,
		ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ПараметрыШапки = Новый Структура;
	
	ПараметрыШапки.Вставить("Номер", НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения));
	ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДЛФ=ДД"));
	ПараметрыШапки.Вставить("НомерИсправления", ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--"));
	ПараметрыШапки.Вставить("ДатаИсправления",
		?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--"));
	
	// Выводим данные о поставщике.
	ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Продавец: %1'"),
		СведенияОПоставщике.ОфициальноеНаименование);
	
	АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Адрес: %1'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
	
	ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИНН/КПП продавца: %1%2'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
		?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
		
	ПараметрыШапки.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	ПараметрыШапки.Вставить("АдресПоставщика", АдресПоставщика);
	ПараметрыШапки.Вставить("ИННПоставщика", ИННПоставщика);
	
	// Выводим данные грузоотправителя.
	ТекстГрузоотправителя = "";
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.Грузоотправитель = Неопределено Тогда
		ТекстГрузоотправителя = "--";
	ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		ТекстГрузоотправителя = НСтр("ru='он же'");
	Иначе
		ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
	КонецЕсли;
	
	ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Грузоотправитель и его адрес: %1'"),
		ТекстГрузоотправителя);
	
	ПараметрыШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	
	// Выводим данные грузополучателя и покупателя.
	ТекстГрузополучателя = "--";
	Если Не (ДанныеПечати.ТолькоУслуги Или ДанныеПечати.Грузополучатель = Неопределено) Тогда
		ТекстГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузополучателе,
			"ПолноеНаименование,ФактическийАдрес",
			Ложь);
	КонецЕсли;
	
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Грузополучатель и его адрес: %1'"),
		ТекстГрузополучателя);
	
	ПараметрыШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	
	СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='К платежно-расчетному документу № %1'"),
		?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
			НСтр("ru='-- от --'"),
			ДанныеПечати.СтрокаПоДокументу));
	
	ПараметрыШапки.Вставить("ПоДокументу", СтрокаПоДокументу);
	
	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Покупатель: %1'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
	
	АдресПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Адрес: %1'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
	
	ИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИНН/КПП покупателя: %1%2'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь),
		?(Не ПустаяСтрока(ДанныеПечати.КПППокупателя), "/" + ДанныеПечати.КПППокупателя, ""));
	
	ПараметрыШапки.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
	ПараметрыШапки.Вставить("АдресПокупателя", АдресПокупателя);
	ПараметрыШапки.Вставить("ИННПокупателя", ИННПокупателя);
	
	ПараметрыШапки.Вставить("Валюта", НСтр("ru='Валюта: наименование, код Российский рубль, 643'"));
	
	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
	Если ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления) Тогда
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Идентификатор государственного контракта, договора (соглашения) (при наличии): %1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	Иначе
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Идентификатор государственного контракта, договора (соглашения): %1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	КонецЕсли;
	ПараметрыШапки.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		Структура.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
		Структура.Вставить("Итого"+Элемент.Ключ, 0);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации, СведенияОКонтрагенте)
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),НСтр("ru = 'г.'"),"");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПозицияРазделителя = СтрНайти(ПолнаяДатаДокумента, " ");
	ПредставлениеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='""%1"" %2года'"),
		Лев(ПолнаяДатаДокумента, ПозицияРазделителя -1),
		Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПозицияРазделителя));
		
	СтруктураПараметров.Вставить("ДатаДокумента", ПредставлениеДаты);
	
	ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
			СведенияОбОрганизации.ОфициальноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика);
	ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
			СведенияОбОрганизации.ОфициальноеНаименование,
			ИННПоставщика);
	Иначе
		ПредставлениеОрганизации = СведенияОбОрганизации.ОфициальноеНаименование;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППокупателя) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
			ИННПокупателя,
			ДанныеПечати.КПППокупателя);
	ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
			ИННПокупателя);
	Иначе
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь);
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата)
		И (ЗначениеЗаполнено(ДанныеПечати.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеПечати.ДоверенностьЛицо)) Тогда
		
		ТекстОснования = СокрЛП(ДанныеПечати.Основание) + "; "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по доверенности №%1 от %2, выданной %3 %4'"),
				ДанныеПечати.ДоверенностьНомер,
				Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"),
				ДанныеПечати.ДоверенностьВыдана,
				ДанныеПечати.ДоверенностьЛицо);
		СтруктураПараметров.Вставить("Основание", ТекстОснования);
		
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Функция ВыводитьКодыТНВЭД(ДанныеПечати, ДействуетПостановление981)
	ПараметрыВывода = Новый Структура("ВыводитьВСтроке, ВыводитьВКолонке");
	ПараметрыВывода.ВыводитьВСтроке = ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		И УчетНДСУТ.СтранаЯвляетсяЧленомЕАЭС(ДанныеПечати.СтранаРегистрации, ДанныеПечати.Дата)
		И ДанныеПечати.Дата >= УчетНДСУТ.ДатаНачалаДействия150ФЗ();
	ПараметрыВывода.ВыводитьВКолонке = ПараметрыВывода.ВыводитьВСтроке И ДействуетПостановление981;
	
	Возврат ПараметрыВывода
	
КонецФункции

Процедура ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, ВыводитьКодНоменклатуры = Истина, ВыводитьКодТНВД = Неопределено)
	
	ИспользоватьНаборы = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");
	
	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
	
	Если ИспользоватьНаборы
		И СтрокаТовары.ЭтоКомплектующие
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		   ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	ИначеЕсли ИспользоватьНаборы
		И СтрокаТовары.ЭтоНабор
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	Иначе
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("КоличествоМест, КоличествоВОдномМесте, НоменклатураКод,КодТНВЭД", 0, 0, "", "--");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураПараметров.КоличествоМест);
	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
	
	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;	
	Если ВыводитьКодТНВД <> Неопределено Тогда
		ДополнительныеПараметрыПолученияНаименованияДляПечати.КодТНВЭД = ?(НЕ ВыводитьКодТНВД.ВыводитьВКолонке И ВыводитьКодТНВД.ВыводитьВСтроке, СтрокаТовары.КодТНВЭД, "");
		Если НЕ ВыводитьКодТНВД.ВыводитьВКолонке Тогда
			СтруктураПараметров.КодТНВЭД = "--";
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование,
			,
			,
			ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс;
	
	СтруктураПараметров.Вставить("ПредставлениеНоменклатуры", ПредставлениеНоменклатуры);
		
	Если Не ВыводитьКодНоменклатуры Тогда
		СтруктураПараметров.НоменклатураКод = "";
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета)

	Для Сч = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(Сч);
		
		Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(Сч, "--");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НомерСчетаФактурыНаПечать(Номер, ИндексПодразделения, УдалитьПользовательскийПрефикс = Ложь)
	
	НомерНаПечать = "";
	
	Если Номер <> Неопределено Тогда
	
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, УдалитьПользовательскийПрефикс);
		
		ПозицияРазделителя = СтрНайти(НомерНаПечать, "-");
		Префикс = Лев(НомерНаПечать, ПозицияРазделителя);
		НомерБезПрефикса = Сред(НомерНаПечать, ПозицияРазделителя + 1);
		
		Если Лев(НомерБезПрефикса, 1) = "И" Тогда
			НомерНаПечать = Префикс + Сред(НомерБезПрефикса, 2);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИндексПодразделения) Тогда
			НомерНаПечать = НомерНаПечать + "/" + ИндексПодразделения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерНаПечать;
	
КонецФункции

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары)
	
	СтруктураСуммПоСтроке = СтруктураРесурсовДляИтогов();
	
	ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураСуммПоСтроке.КоличествоМест);
	Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] = ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] + Элемент.Значение;
			ИтоговыеСуммы["Итого"+Элемент.Ключ] = ИтоговыеСуммы["Итого"+Элемент.Ключ] + Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, ВалютаРегламентированногоУчета));
	
КонецПроцедуры

Функция СведенияОГрузоотправителе(ДанныеПечати)
	
	Если ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		СведенияОГрузоотправителе = Справочники.РегистрацииВНалоговомОргане.СведенияОПодразделении(ДанныеПечати.Грузоотправитель);
	Иначе
		СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	КонецЕсли;
	
	Возврат СведенияОГрузоотправителе;
	
КонецФункции

Функция СтруктураРесурсовДляИтогов()
	
	Структура = Новый Структура;
	
	Структура.Вставить("СуммаБезНДС",       0);
	Структура.Вставить("СуммаНДС",          0);
	Структура.Вставить("СуммаСНДС",         0);
	Структура.Вставить("Количество",        0);
	Структура.Вставить("КоличествоМест",    0);
	Структура.Вставить("КоличествоПринято", 0);
	Структура.Вставить("МассаБрутто",       0);
	Структура.Вставить("МассаНетто",        0);
	Структура.Вставить("Сумма",             0);
	
	Структура.Вставить("РазницаБезНДСУвеличение", 0);
	Структура.Вставить("РазницаБезНДСУменьшение", 0);
	Структура.Вставить("РазницаНДСУвеличение",    0);
	Структура.Вставить("РазницаНДСУменьшение",    0);
	Структура.Вставить("РазницаСНДСУвеличение",   0);
	Структура.Вставить("РазницаСНДСУменьшение",   0);
	
	Возврат Структура;
	
КонецФункции

Процедура ОкруглитьДоЦелого(ОкругляемоеЧисло)
	
	

	Если ЗначениеЗаполнено(ОкругляемоеЧисло) Тогда
		Если ОкругляемоеЧисло <> Цел(ОкругляемоеЧисло) Тогда
			ОкругляемоеЧисло = Цел(ОкругляемоеЧисло) + 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
  	
Функция ПолучитьДанныеДляПечатнойФормыУПД(Знач ПараметрыПечати, МассивОбъектов) Экспорт
	
	ПараметрыПечати.Вставить("ДополнитьДаннымиУПД", Истина);
	ПараметрыПечати.Вставить("ПечатьВВалюте", Ложь);
	Возврат ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов);
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка                  КАК Ссылка,
	|	ТаблицаОснований.ДокументОснование       КАК ДокументОснование,
	|	ТаблицаОснований.Ссылка.Корректировочный КАК Корректировочный,
	|	ТаблицаОснований.Ссылка.Дата             КАК Дата
	|ПОМЕСТИТЬ СчетаФактурыОснования
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактурыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	СчетаФактурыОснования КАК СчетаФактурыОснования");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатЗапроса  = Запрос.Выполнить();
	
	МассивОснований = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
	ПоместитьВременнуюТаблицуДанныхОснований(МенеджерВременныхТаблиц, МассивОснований);
		
	МассивАналитикУчетаПоПартнерам = Новый Массив;
	
	// В подчиненном узле нет всех данных для определения авансов, поэтому заполняем только если главный узел:
	ЗаполнятьПлатежноРасчетныеДокументы = ПланыОбмена.ГлавныйУзел() = Неопределено;
	
	Если ЗаполнятьПлатежноРасчетныеДокументы Тогда
		ПоместитьВременнуюТаблицуЗаполненияПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц);
		МассивАналитикУчетаПоПартнерамПлатежноРасчетныхДокументов = 
			АналитикиУчетаПоПартнерамДляАктуализацииПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивАналитикУчетаПоПартнерам, 
				МассивАналитикУчетаПоПартнерамПлатежноРасчетныхДокументов);
		ОкончаниеПериодаРасчета = КонецРасчетаДляАктуализацииПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц);
	КонецЕсли;
	
	// Актуализировать расчеты для получения сумм по товарам документа-основания
	Если Не ПараметрыПечати.ПечатьВВалюте Тогда
		
		Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",
			ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТаблицаДанныхДокументов КАК ДанныеДокументов
		|	ПО
		|		РасчетыСКлиентами.Регистратор = ДанныеДокументов.Ссылка
		|
		|ГДЕ
		|	ДанныеДокументов.Валюта <> &ВалютаРегламентированногоУчета
		|	И РасчетыСКлиентами.Активность
		|";
		
		ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивАналитикУчетаПоПартнерам, 
			ТаблицаАналитик.ВыгрузитьКолонку("АналитикаУчетаПоПартнерам"), Истина);
		
		ОкончаниеПериодаРасчета = КонецМесяца(ВзаиморасчетыСервер.ПолучитьМаксимальнуюДатуВКоллекцииДокументов(МенеджерВременныхТаблиц)) + 1;
				
	КонецЕсли;
	
	Если (ЗаполнятьПлатежноРасчетныеДокументы ИЛИ Не ПараметрыПечати.ПечатьВВалюте)
		И МассивАналитикУчетаПоПартнерам.Количество() > 0 Тогда
		АналитикиРасчета = РаспределениеВзаиморасчетов.АналитикиРасчета();
		АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикУчетаПоПартнерам;
		Попытка
			РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСКлиентами(ОкончаниеПериодаРасчета, АналитикиРасчета);
		Исключение
			ТекстСообщения = НСтр("ru ='Печатная форма сформирована по неактуальным данным.
			|Необходимо актуализировать взаиморасчеты вручную и переформировать печатную форму.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Если ЗаполнятьПлатежноРасчетныеДокументы Тогда
		ПоместитьВременнуюТаблицуПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц,
			МассивАналитикУчетаПоПартнерамПлатежноРасчетныхДокументов);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	NULL КАК Ссылка,
		|	NULL КАК СтрокаПлатежноРасчетныеДокументы
		|ПОМЕСТИТЬ ТаблицаПлатежноРасчетныеДокументы";
		Запрос.Выполнить();
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ВыводитьНаборы", Ложь);
	СформироватьВременнуюТаблицуТоваровДляПечати(МенеджерВременныхТаблиц, МассивОснований, ПараметрыПечати);
	
	ПечататьСчетаФактурыПолученные = ПараметрыПечати.Свойство("МассивСчетФактураПолученный");
	Если ПечататьСчетаФактурыПолученные Тогда
		Запрос.УстановитьПараметр("МассивСчетФактураПолученный", ПараметрыПечати.МассивСчетФактураПолученный);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаДанныхШапкиДляПечатиСчетаФактуры(ПараметрыПечати)
		+ ТекстЗапросаИсходныхДокументовДляПечатиСчетаФактуры()
		+ ТекстЗапросаДанныхТабличнойЧастиДляПечатиСчетаФактуры(ПараметрыПечати);
	
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru='счет-фактура'"));
	Запрос.УстановитьПараметр("ПредставлениеСчетФактураПосредника", НСтр("ru='счет-фактура посредника'"));
	
	Запрос.УстановитьПараметр("ВыводитьБазовыеЕдиницыИзмерения", Константы.ВыводитьБазовыеЕдиницыИзмерения.Получить());
	
	МассивОперацийПередачаНаКомиссию = Новый Массив;
	МассивОперацийПередачаНаКомиссию.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	МассивОперацийПередачаНаКомиссию.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	МассивОперацийПередачаНаКомиссию.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
	Запрос.УстановитьПараметр("ХозяйственныеОперацииПередачаНаКомиссию", МассивОперацийПередачаНаКомиссию);
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	КоличествоРезультатов     = МассивРезультатов.Количество();
	РезультатПоШапке          = МассивРезультатов[КоличествоРезультатов - 3];
	РезультатПоИсходнымДанным = МассивРезультатов[КоличествоРезультатов - 2];
	РезультатПоТабличнойЧасти = МассивРезультатов[КоличествоРезультатов - 1];
	
	СтруктураДанныхДляПечати  = Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти, РезультатПоИсходнымДанным",
		РезультатПоШапке,
		РезультатПоТабличнойЧасти,
		РезультатПоИсходнымДанным);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция КонецРасчетаДляАктуализацииПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Расчеты.Период), ДАТАВРЕМЯ(1,1,1)) КАК Период
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаполненияПлатежноРасчетныхДокументов КАК ТаблицаДокументов
	|		ПО Расчеты.Регистратор = ТаблицаДокументов.ДокументОснование
	|			И Расчеты.АналитикаУчетаПоПартнерам.Организация = ТаблицаДокументов.Организация
	|ГДЕ
	|	Расчеты.Активность
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Расчеты.Период) ЕСТЬ НЕ NULL";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТаблицаПериод = Результат.Выгрузить();
		КонецРасчета = КонецМесяца(ТаблицаПериод[0].Период) + 1;
	Иначе
		КонецРасчета = КонецМесяца(ТекущаяДатаСеанса())+1;
	КонецЕсли;
	
	Возврат КонецРасчета;
	
КонецФункции

Процедура ПоместитьВременнуюТаблицуЗаполненияПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Организация КАК Организация,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ТаблицаЗаполненияПлатежноРасчетныхДокументов
	|ИЗ
	|	СчетаФактурыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ПлатежноРасчетныеДокументы КАК СчетФактураВыданныйПлатежноРасчетныеДокументы
	|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка
	|ГДЕ
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.НомерСтроки ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	Организация";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПоместитьВременнуюТаблицуДанныхОснований(МенеджерВременныхТаблиц, МассивОснований)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТипыОснований = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОснований);
	
	ТекстЗапроса           = "";
	ТекстОтветственныеЛица = "";
	ПервыйТип              = Истина;
	
	Для Каждого ТипОснования Из ТипыОснований Цикл
		
		ОбъектыТипа = ТипОснования.Значение;
		ИмяОбъекта  = Сред(ТипОснования.Ключ, 10);
		
		Запрос.Параметры.Вставить("ДокументОснование_" + ИмяОбъекта, ОбъектыТипа);
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОтветственныеЛица) Тогда
			ТекстОтветственныеЛица = ТекстОтветственныеЛица + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		МенеджерОбъекта = Документы[ИмяОбъекта];
		ТекстЗапроса = ТекстЗапроса +
			МенеджерОбъекта.ТекстЗапросаДанныхОснованияДляПечатнойФормыСчетФактура();
		
		ИмяВременнойТаблицы = ИмяОбъекта + "ОтветственныеЛица";
		
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
			ОбъектыТипа, МенеджерВременныхТаблиц, , ,
			ИмяВременнойТаблицы);
			
		ТекстОтветственныеЛица = ТекстОтветственныеЛица + "
		|ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК Ссылка,
		|	Таблица.РуководительНаименование     КАК РуководительНаименование,
		|	Таблица.РуководительДолжность        КАК РуководительДолжность,
		|	Таблица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтерНаименование
		|//ОператорПОМЕСТИТЬ
		|ИЗ
		|	" + ИмяВременнойТаблицы + " КАК Таблица";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"//ОператорПОМЕСТИТЬ", ?(ПервыйТип, "ПОМЕСТИТЬ ТаблицаДанныхДокументов", ""));
		ТекстОтветственныеЛица = СтрЗаменить(ТекстОтветственныеЛица,
			"//ОператорПОМЕСТИТЬ", ?(ПервыйТип, "ПОМЕСТИТЬ ТаблицаОтветственныеЛица", ""));
			
		ПервыйТип = Ложь;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = ТекстЗапроса + ТекстОтветственныеЛица;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция АналитикиУчетаПоПартнерамДляАктуализацииПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаполненияПлатежноРасчетныхДокументов КАК ТаблицаДокументов
	|		ПО Расчеты.Регистратор = ТаблицаДокументов.ДокументОснование
	|			И Расчеты.АналитикаУчетаПоПартнерам.Организация = ТаблицаДокументов.Организация
	|ГДЕ
	|	Расчеты.Активность";
	
	ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаАналитик.ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
	
КонецФункции

Процедура ПоместитьВременнуюТаблицуПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц, МассивАналитикУчетаПоПартнерам)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаПолученияНомеровИДатПлатежноРасчетныхДокументов();	
	Запрос.УстановитьПараметр("МассивАналитикУчетаПоПартнерам", МассивАналитикУчетаПоПартнерам);
	
	ПлатежноРасчетныеДокументыСводно = Новый ТаблицаЗначений;
	ПлатежноРасчетныеДокументыСводно.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	ПлатежноРасчетныеДокументыСводно.Колонки.Добавить("СтрокаПлатежноРасчетныеДокументы",
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1000)));
	
	ПлатежноРасчетныеДокументы = Новый ТаблицаЗначений;
	ПлатежноРасчетныеДокументы.Колонки.Добавить("НомерПлатежноРасчетногоДокумента",
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(30)));
	ПлатежноРасчетныеДокументы.Колонки.Добавить("ДатаПлатежноРасчетногоДокумента",
		Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	ВыборкаСчетФактур = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчетФактур.Следующий() Цикл
		
		ПлатежноРасчетныеДокументы.Очистить();
		
		ЗаполнитьТаблицуПлатежноРасчетныхДокументовПоВыборке(ПлатежноРасчетныеДокументы, ВыборкаСчетФактур);
		
		НоваяСтрока = ПлатежноРасчетныеДокументыСводно.Добавить();		
		НоваяСтрока.Ссылка = ВыборкаСчетФактур.СчетФактура;
		НоваяСтрока.СтрокаПлатежноРасчетныеДокументы = СтрокаРасчетноПлатежныхДокументов(ПлатежноРасчетныеДокументы);
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.СтрокаПлатежноРасчетныеДокументы
	|ПОМЕСТИТЬ ТаблицаПлатежноРасчетныеДокументы
	|ИЗ
	|	&ПлатежноРасчетныеДокументы КАК Таблица";
	
	Запрос.УстановитьПараметр("ПлатежноРасчетныеДокументы", ПлатежноРасчетныеДокументыСводно); 
	
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура СформироватьВременнуюТаблицуТоваровДляПечати(МенеджерВременныхТаблиц, МассивОснований, ПараметрыПечати)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТипыОснований = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОснований);
	
	ТекстОбщейТаблицыТовары = "";
	ПервыйТип               = Истина;
	ЕстьНаборы              = Ложь;
	
	Для Каждого ТипОснования Из ТипыОснований Цикл
		
		ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
		ПараметрыЗаполнения.ПересчитыватьВВалютуРегл = НЕ ПараметрыПечати.ПечатьВВалюте;
		ПараметрыЗаполнения.АктуализироватьРасчеты = Ложь;
		
		ИмяОбъекта = Сред(ТипОснования.Ключ, 10);
		
		Если ИмяОбъекта = "ВозвратТоваровПоставщику"
				Или ИмяОбъекта = "ВыкупВозвратнойТарыКлиентом"
				Или ИмяОбъекта = "ЗаписьКнигиПродаж"
				Или ИмяОбъекта = "ПередачаТоваровМеждуОрганизациями"
				Или ИмяОбъекта = "РеализацияТоваровУслуг" 
				Или ИмяОбъекта = "КорректировкаРеализации" Тогда
			ПараметрыЗаполнения.ВключаяНомераГТД = Истина;
		КонецЕсли;
		
		Если ИмяОбъекта = "КорректировкаРеализации" Тогда
			ПараметрыЗаполнения.ВключаяДоКорректировки = Истина;
		КонецЕсли;
		
		МенеджерОбъекта = Документы[ИмяОбъекта];
		Если ИмяОбъекта = "ОтчетПоКомиссииМеждуОрганизациями" Тогда
			МенеджерОбъекта.ПоместитьВременнуюТаблицуТоваровПоВознаграждению(МенеджерВременныхТаблиц, ПараметрыЗаполнения);
		Иначе
			ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения);
		КонецЕсли;
		
		Если ИмяОбъекта = "КорректировкаРеализации"
				Тогда
			МенеджерОбъекта.ПреобразоватьВременнуюТаблицуТоваровДляСчетаФактуры(МенеджерВременныхТаблиц);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОбщейТаблицыТовары) Тогда
			ТекстОбщейТаблицыТовары = ТекстОбщейТаблицыТовары + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		ТекстОбщейТаблицыТовары = ТекстОбщейТаблицыТовары + "
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка                                    КАК Ссылка,
		|	ТаблицаДокумента.НомерСтроки                               КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура                              КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика                            КАК Характеристика,
		|	ТаблицаДокумента.Упаковка                                  КАК Упаковка,
		|	ТаблицаДокумента.НомерГТД                                  КАК НомерГТД,
		|	ТаблицаДокумента.Количество                                КАК Количество,
		|	ТаблицаДокумента.КоличествоУпаковок                        КАК КоличествоУпаковок,
		|	ТаблицаДокумента.СуммаБезНДС                               КАК СуммаБезНДС,
		|	ТаблицаДокумента.СтавкаНДС                                 КАК СтавкаНДС,
		|	ТаблицаДокумента.СуммаНДС                                  КАК СуммаНДС,
		|	%Содержание                                                КАК Содержание,
		|//ДанныеНабора
		|//ДанныеКорректировки
		|	ТаблицаДокумента.ЭтоТовар                                  КАК ЭтоТовар,
		|	ТаблицаДокумента.ВернутьМногооборотнуюТару                 КАК ВернутьМногооборотнуюТару
		|//ОператорПОМЕСТИТЬ
		|ИЗ
		|	" + ИмяОбъекта + "ТаблицаТоваров КАК ТаблицаДокумента";
		
		Если ИмяОбъекта = "АктВыполненныхРабот"
				Или ИмяОбъекта = "КорректировкаРеализации"
				Или ИмяОбъекта = "РеализацияУслугПрочихАктивов" Тогда
			ТекстОбщейТаблицыТовары = СтрЗаменить(ТекстОбщейТаблицыТовары, "%Содержание", "ТаблицаДокумента.Содержание");
		Иначе
			ТекстОбщейТаблицыТовары = СтрЗаменить(ТекстОбщейТаблицыТовары, "%Содержание", """""");
		КонецЕсли;
		
		Если ИмяОбъекта = "АктВыполненныхРабот" Или ИмяОбъекта = "РеализацияТоваровУслуг" Тогда
			ЕстьНаборы = Истина;
			ТекстЗамены =
			"	ТаблицаДокумента.ВариантКомплектацииНоменклатуры             КАК ВариантКомплектацииНоменклатуры,
			|	ТаблицаДокумента.ВариантПредставленияНабораВПечатныхФормах   КАК ВариантПредставленияНабораВПечатныхФормах,
			|	ТаблицаДокумента.ВариантРасчетаЦеныНабора                    КАК ВариантРасчетаЦеныНабора,
			|	ТаблицаДокумента.НоменклатураНабора                          КАК НоменклатураНабора,
			|	ТаблицаДокумента.ХарактеристикаНабора                        КАК ХарактеристикаНабора,";
		Иначе
			ТекстЗамены =
			"	НЕОПРЕДЕЛЕНО                                                 КАК ВариантКомплектацииНоменклатуры,
			|	НЕОПРЕДЕЛЕНО                                                 КАК ВариантПредставленияНабораВПечатныхФормах,
			|	НЕОПРЕДЕЛЕНО                                                 КАК ВариантРасчетаЦеныНабора,
			|	&ПустаяНоменклатура                                          КАК НоменклатураНабора,
			|	НЕОПРЕДЕЛЕНО                                                 КАК ХарактеристикаНабора,";
		КонецЕсли;
		ТекстОбщейТаблицыТовары = СтрЗаменить(ТекстОбщейТаблицыТовары, "//ДанныеНабора", ТекстЗамены);
		
		Если ИмяОбъекта = "КорректировкаРеализации" Тогда
			ТекстЗамены =
			"	ТаблицаДокумента.КоличествоДо                                КАК КоличествоДо,
			|	ТаблицаДокумента.КоличествоУпаковокДо                        КАК КоличествоУпаковокДо,
			|	ТаблицаДокумента.СуммаБезНДСДо                               КАК СуммаБезНДСДо,
			|	ТаблицаДокумента.СуммаНДСДо                                  КАК СуммаНДСДо,
			|	ТаблицаДокумента.РазницаБезНДСУвеличение                     КАК РазницаБезНДСУвеличение,
			|	ТаблицаДокумента.РазницаБезНДСУменьшение                     КАК РазницаБезНДСУменьшение,
			|	ТаблицаДокумента.РазницаНДСУвеличение                        КАК РазницаНДСУвеличение,
			|	ТаблицаДокумента.РазницаНДСУменьшение                        КАК РазницаНДСУменьшение,
			|	ТаблицаДокумента.РазницаСНДСУвеличение                       КАК РазницаСНДСУвеличение,
			|	ТаблицаДокумента.РазницаСНДСУменьшение                       КАК РазницаСНДСУменьшение,";
		Иначе
			ТекстЗамены = 
			"	0                                                            КАК КоличествоДо,
			|	0                                                            КАК КоличествоУпаковокДо,
			|	0                                                            КАК СуммаБезНДСДо,
			|	0                                                            КАК СуммаНДСДо,
			|	0                                                            КАК РазницаБезНДСУвеличение,
			|	0                                                            КАК РазницаБезНДСУменьшение,
			|	0                                                            КАК РазницаНДСУвеличение,
			|	0                                                            КАК РазницаНДСУменьшение,
			|	0                                                            КАК РазницаСНДСУвеличение,
			|	0                                                            КАК РазницаСНДСУменьшение,";
		КонецЕсли;
		ТекстОбщейТаблицыТовары = СтрЗаменить(ТекстОбщейТаблицыТовары, "//ДанныеКорректировки", ТекстЗамены);
		
		ТекстОбщейТаблицыТовары = СтрЗаменить(ТекстОбщейТаблицыТовары,
			"//ОператорПОМЕСТИТЬ", ?(ПервыйТип, "ПОМЕСТИТЬ ТаблицаТоваров", ""));
		ПервыйТип = Ложь;
		
	КонецЦикла;
	
	ТекстОбщейТаблицыТовары = ТекстОбщейТаблицыТовары + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстТаблицыНаборов =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка                КАК Ссылка,
	|	ТаблицаТоваров.НоменклатураНабора    КАК НоменклатураНабора,
	|	ТаблицаТоваров.ХарактеристикаНабора  КАК ХарактеристикаНабора,
	|	ТаблицаТоваров.СтавкаНДС             КАК СтавкаНДС,
	|	МИНИМУМ(ТаблицаТоваров.НомерСтроки)  КАК НомерСтроки,
	|	СУММА(ТаблицаТоваров.СуммаБезНДС)    КАК СуммаБезНДС,
	|	СУММА(ТаблицаТоваров.СуммаНДС)       КАК СуммаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Ссылка = ТаблицаТоваров.Номенклатура
	|
	|ГДЕ
	|	ТаблицаТоваров.НоменклатураНабора <> &ПустаяНоменклатура
	|	И (ДанныеНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ НЕ ТаблицаТоваров.ВернутьМногооборотнуюТару)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.НоменклатураНабора,
	|	ТаблицаТоваров.ХарактеристикаНабора,
	|	ТаблицаТоваров.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                                    КАК Ссылка,
	|	Товары.ВариантКомплектацииНоменклатуры           КАК ВариантКомплектацииНоменклатуры,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР КОГДА Товары.ВариантКомплектацииНоменклатуры.НоменклатураОсновногоКомпонента = Товары.Номенклатура
	|		И Товары.ВариантКомплектацииНоменклатуры.ХарактеристикаОсновногоКомпонента = Товары.Характеристика ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОсновнаяКомплектующая,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК КоличествоПоУмолчанию,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьПервая
	|ИЗ
	|	ТаблицаТоваров КАК Товары
	|
	|ГДЕ
	|	Товары.НоменклатураНабора <> &ПустаяНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка                                                                                КАК Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка                                           КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец                                  КАК НоменклатураНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика                            КАК ХарактеристикаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура   КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ОсновнаяКомплектующая,
	|	NULL КАК СтавкаНДС,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоПоУмолчанию,
	|	0 КАК Количество
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка ИЗ ТаблицаТоваров КАК Т) КАК Т
	|		ПО ИСТИНА
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ВариантКомплектацииНоменклатуры ИЗ ТаблицаТоваров КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	МАКСИМУМ(Таблица.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(Таблица.ОсновнаяКомплектующая) КАК ОсновнаяКомплектующая,
	|	СУММА(Таблица.КоличествоПоУмолчанию) КАК КоличествоПоУмолчанию,
	|	СУММА(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьВторая
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьПервая КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.СтавкаНДС
	|			ИНАЧЕ null
	|		КОНЕЦ) КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0 И Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК Количество,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) КАК КоэффициентМаксимум,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК КоэффициентМинимум
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьВторая КАК Результат
	|СГРУППИРОВАТЬ ПО
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНаборыДополнительно.ВариантКомплектацииНоменклатуры,
	|
	|	ВЫБОР КОГДА ДанныеОснований.ХозяйственнаяОперация В (&ХозяйственныеОперацииПередачаНаКомиссию)
	|			И ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = &ВариантТолькоНабор ТОГДА
	|		&ВариантНаборИКомплектующие
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|	КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|
	|	ВЫБОР КОГДА ДанныеОснований.ХозяйственнаяОперация В (&ХозяйственныеОперацииПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА
	|			ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = &ВариантТолькоНабор ТОГДА
	|				&ВариантНаборИКомплектующие
	|			ИНАЧЕ
	|				ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|			КОНЕЦ = &ВариантНаборИКомплектующие
	|			И ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям)) ТОГДА
	|
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|
	|	Таблица.Ссылка                            КАК Ссылка,
	|	Таблица.НоменклатураНабора                КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора              КАК ХарактеристикаНабора,
	|	Таблица.НомерСтроки                       КАК НомерСтроки,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.КоэффициентМинимум = ВременнаяТаблицаНаборыДополнительно.КоэффициентМаксимум ТОГДА Истина ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПолныйНабор,
	|	Таблица.СуммаБезНДС                       КАК СуммаБезНДС,
	|	Таблица.СуммаНДС                          КАК СуммаНДС,
	|	Таблица.СтавкаНДС                         КАК СтавкаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|		И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|		И Таблица.Ссылка = ВременнаяТаблицаНаборыДополнительно.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеОснований
	|	ПО ДанныеОснований.Ссылка = Таблица.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстРезультирующейТаблицы = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка                                    КАК Ссылка,
	|	ТаблицаТоваров.НомерСтроки                               КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                              КАК Номенклатура,
	|	ВЫБОР КОГДА ТаблицаТоваров.Содержание = """" ТОГДА
	|		ДанныеНоменклатуры.НаименованиеПолное
	|	ИНАЧЕ 
	|		ТаблицаТоваров.Содержание
	|	КОНЕЦ                                                    КАК НоменклатураНаименование,
	|	ВЫБОР КОГДА &КолонкаКодов = ""Артикул"" ТОГДА
	|		ДанныеНоменклатуры.Артикул
	|	ИНАЧЕ
	|		ДанныеНоменклатуры.Код
	|	КОНЕЦ                                                    КАК НоменклатураКод,
	|	ДанныеНоменклатуры.КодТНВЭД                              КАК КодТНВЭД,
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И ТаблицаТоваров.ВернутьМногооборотнуюТару
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                    КАК ЭтоВозвратнаяТара,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения И ТаблицаТоваров.Номенклатура <> Неопределено
	|			ТОГДА ДанныеНоменклатуры.ЕдиницаИзмерения
	|		ИНАЧЕ &ТекстЗапросаЕдиницаИзмерения
	|	КОНЕЦ                                                    КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА ТаблицаТоваров.Содержание = """" ТОГДА
	|		ТаблицаТоваров.Характеристика
	|	ИНАЧЕ 
	|		""""
	|	КОНЕЦ                                                    КАК Характеристика,
	|	ТаблицаТоваров.НомерГТД                                  КАК НомерГТД,
	|	ТаблицаТоваров.СтавкаНДС                                 КАК СтавкаНДС,
	|
	|//РеквизитыТаблицыНаборов
	|
	|	ВЫБОР КОГДА &ВыводитьБазовыеЕдиницыИзмерения ТОГДА
	|		ТаблицаТоваров.Количество
	|	ИНАЧЕ
	|		ТаблицаТоваров.КоличествоУпаковок
	|	КОНЕЦ                                                    КАК Количество,
	|	ВЫБОР КОГДА &ВыводитьБазовыеЕдиницыИзмерения ТОГДА
	|		ТаблицаТоваров.КоличествоДо
	|	ИНАЧЕ
	|		ТаблицаТоваров.КоличествоУпаковокДо
	|	КОНЕЦ                                                    КАК КоличествоДо,
	|	ВЫБОР КОГДА ТаблицаТоваров.Количество = 0 ТОГДА
	|		0
	|	КОГДА &ВыводитьБазовыеЕдиницыИзмерения ТОГДА
	|		ТаблицаТоваров.СуммаБезНДС / ТаблицаТоваров.Количество
	|	ИНАЧЕ
	|		ТаблицаТоваров.СуммаБезНДС / ТаблицаТоваров.КоличествоУпаковок
	|	КОНЕЦ                                                    КАК Цена,
	|	ВЫБОР КОГДА ТаблицаТоваров.КоличествоДо = 0 ТОГДА
	|		0
	|	КОГДА &ВыводитьБазовыеЕдиницыИзмерения ТОГДА
	|		ТаблицаТоваров.СуммаБезНДСДо / ТаблицаТоваров.КоличествоДо
	|	ИНАЧЕ
	|		ТаблицаТоваров.СуммаБезНДСДо / ТаблицаТоваров.КоличествоУпаковокДо
	|	КОНЕЦ                                                    КАК ЦенаДо,
	|	ТаблицаТоваров.СуммаБезНДС                               КАК СуммаБезНДС,
	|	ТаблицаТоваров.СуммаБезНДСДо                             КАК СуммаБезНДСДо,
	|	ТаблицаТоваров.СуммаНДС                                  КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаНДСДо                                КАК СуммаНДСДо,
	|	ТаблицаТоваров.РазницаБезНДСУвеличение                   КАК РазницаБезНДСУвеличение,
	|	ТаблицаТоваров.РазницаБезНДСУменьшение                   КАК РазницаБезНДСУменьшение,
	|	ТаблицаТоваров.РазницаНДСУвеличение                      КАК РазницаНДСУвеличение,
	|	ТаблицаТоваров.РазницаНДСУменьшение                      КАК РазницаНДСУменьшение,
	|	ТаблицаТоваров.РазницаСНДСУвеличение                     КАК РазницаСНДСУвеличение,
	|	ТаблицаТоваров.РазницаСНДСУменьшение                     КАК РазницаСНДСУменьшение
	|
	|ПОМЕСТИТЬ ТаблицаТоваровДокументов
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|//СоединениеТаблицыНаборов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО ТаблицаТоваров.Номенклатура = ДанныеНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ДанныеУпаковки
	|		ПО НЕ &ВыводитьБазовыеЕдиницыИзмерения
	|			И ТаблицаТоваров.Упаковка = ДанныеУпаковки.Ссылка
	|ГДЕ
	|	ТаблицаТоваров.НоменклатураНабора = &ПустаяНоменклатура
	|	ИЛИ (ТаблицаТоваров.НоменклатураНабора <> &ПустаяНоменклатура
	|		И ТаблицаТоваров.ВариантПредставленияНабораВПечатныхФормах В (
	|		&ВариантТолькоКомплектующие, &ВариантНаборИКомплектующие))";
	
	Если ЕстьНаборы Тогда
		
		ТекстРезультирующейТаблицы = СтрЗаменить(ТекстРезультирующейТаблицы, "//РеквизитыТаблицыНаборов",
		"	ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
		|		ВременнаяТаблицаНаборы.НомерСтроки
		|	ИНАЧЕ
		|		ТаблицаТоваров.НомерСтроки
		|	КОНЕЦ                                                    КАК НомерСтрокиНаборы,
		|	ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
		|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах
		|	ИНАЧЕ
		|		&ПустойВариантПредставленияНаборов
		|	КОНЕЦ                                                    КАК ВариантПредставленияНабораВПечатныхФормах,
		|	ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
		|		ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора
		|	ИНАЧЕ
		|		&ПустойВариантРасчетаЦенНаборов
		|	КОНЕЦ                                                    КАК ВариантРасчетаЦеныНабора,
		|	ТаблицаТоваров.НоменклатураНабора                        КАК НоменклатураНабора,
		|	ТаблицаТоваров.ХарактеристикаНабора                      КАК ХарактеристикаНабора,
		|	ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ                                                    КАК ЭтоКомплектующие,
		|	ЛОЖЬ                                                     КАК ЭтоНабор,
		|	ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
		|		ВременнаяТаблицаНаборы.ПолныйНабор
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ                                                    КАК ПолныйНабор,");
		
		ТекстРезультирующейТаблицы = СтрЗаменить(ТекстРезультирующейТаблицы, "//СоединениеТаблицыНаборов",
		"		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
		|		ПО ВременнаяТаблицаНаборы.НоменклатураНабора = ТаблицаТоваров.НоменклатураНабора
		|			И ВременнаяТаблицаНаборы.ХарактеристикаНабора = ТаблицаТоваров.ХарактеристикаНабора
		|			И ВременнаяТаблицаНаборы.Ссылка = ТаблицаТоваров.Ссылка");
		
		ТекстРезультирующейТаблицы = ТекстРезультирующейТаблицы + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" +
		
		"ВЫБРАТЬ
		|	ВременнаяТаблицаНаборы.Ссылка               КАК Ссылка,
		|	0                                           КАК НомерСтроки,
		|	ВременнаяТаблицаНаборы.НоменклатураНабора   КАК Номенклатура,
		|	ДанныеНоменклатуры.НаименованиеПолное       КАК НоменклатураНаименование,
		|	ВЫБОР КОГДА &КолонкаКодов = ""Артикул"" ТОГДА
		|		ДанныеНоменклатуры.Артикул
		|	ИНАЧЕ
		|		ДанныеНоменклатуры.Код
		|	КОНЕЦ                                       КАК НоменклатураКод,
		|	ДанныеНоменклатуры.КодТНВЭД                 КАК КодТНВЭД,
		|	ЛОЖЬ                                        КАК ЭтоВозвратнаяТара,
		|	ДанныеНоменклатуры.ЕдиницаИзмерения         КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаНаборы.ХарактеристикаНабора КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
		|	ВременнаяТаблицаНаборы.СтавкаНДС            КАК СтавкаНДС,
		|
		|	ВременнаяТаблицаНаборы.НомерСтроки                               КАК НомерСтрокиНаборы,
		|	ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
		|	ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
		|	ВременнаяТаблицаНаборы.НоменклатураНабора                        КАК НоменклатураНабора,
		|	ВременнаяТаблицаНаборы.ХарактеристикаНабора                      КАК ХарактеристикаНабора,
		|	ЛОЖЬ                                                             КАК ЭтоКомплектующие,
		|	ИСТИНА                                                           КАК ЭтоНабор,
		|	ВременнаяТаблицаНаборы.ПолныйНабор                               КАК ПолныйНабор,
		|
		|	ВЫБОР КОГДА &ВыводитьБазовыеЕдиницыИзмерения ТОГДА
		|		ВременнаяТаблицаНаборы.Количество
		|	ИНАЧЕ
		|		ВременнаяТаблицаНаборы.КоличествоУпаковок
		|	КОНЕЦ                                       КАК Количество,
		|	0                                           КАК КоличествоДо,
		|	ВЫБОР КОГДА &ВыводитьБазовыеЕдиницыИзмерения ТОГДА
		|		ВременнаяТаблицаНаборы.СуммаБезНДС / ВременнаяТаблицаНаборы.Количество
		|	ИНАЧЕ
		|		ВременнаяТаблицаНаборы.СуммаБезНДС / ВременнаяТаблицаНаборы.КоличествоУпаковок
		|	КОНЕЦ                                       КАК Цена,
		|	0                                           КАК ЦенаДо,
		|	ВременнаяТаблицаНаборы.СуммаБезНДС          КАК СуммаБезНДС,
		|	0                                           КАК СуммаБезНДСДо,
		|	ВременнаяТаблицаНаборы.СуммаНДС             КАК СуммаНДС,
		|	0                                           КАК СуммаНДСДо,
		|	0                                           КАК РазницаБезНДСУвеличение,
		|	0                                           КАК РазницаБезНДСУменьшение,
		|	0                                           КАК РазницаНДСУвеличение,
		|	0                                           КАК РазницаНДСУменьшение,
		|	0                                           КАК РазницаСНДСУвеличение,
		|	0                                           КАК РазницаСНДСУменьшение
		|
		|ИЗ
		|	ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
		|		ПО ВременнаяТаблицаНаборы.НоменклатураНабора = ДанныеНоменклатуры.Ссылка
		|
		|ГДЕ
		|	ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (
		|		&ВариантТолькоНабор, &ВариантНаборИКомплектующие)";
		
	Иначе
		
		ТекстРезультирующейТаблицы = СтрЗаменить(ТекстРезультирующейТаблицы, "//РеквизитыТаблицыНаборов",
		"	ТаблицаТоваров.НомерСтроки          КАК НомерСтрокиНаборы,
		|	&ПустойВариантПредставленияНаборов  КАК ВариантПредставленияНабораВПечатныхФормах,
		|	&ПустойВариантРасчетаЦенНаборов     КАК ВариантРасчетаЦеныНабора,
		|	ТаблицаТоваров.НоменклатураНабора   КАК НоменклатураНабора,
		|	ТаблицаТоваров.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ЛОЖЬ                                КАК ЭтоКомплектующие,
		|	ЛОЖЬ                                КАК ЭтоНабор,
		|	ЛОЖЬ                                КАК ПолныйНабор,");
		
	КонецЕсли;
	
	Запрос.Текст = ТекстОбщейТаблицыТовары +
		?(ЕстьНаборы, ТекстТаблицыНаборов, "") +
		ТекстРезультирующейТаблицы;
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка",
			"ТаблицаТоваров.Упаковка",
			?(ИмяОбъекта = "РеализацияУслугПрочихАктивов","","ТаблицаТоваров.Номенклатура")));
	
	Запрос.УстановитьПараметр("ВыводитьБазовыеЕдиницыИзмерения", Константы.ВыводитьБазовыеЕдиницыИзмерения.Получить());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	Запрос.УстановитьПараметр("ВариантТолькоНабор", Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор);
	Запрос.УстановитьПараметр("ВариантТолькоКомплектующие",
		Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие);
	Запрос.УстановитьПараметр("ВариантНаборИКомплектующие",
		Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие);
	Запрос.УстановитьПараметр("ПустойВариантПредставленияНаборов",
		Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВариантРасчетаЦенНаборов", Перечисления.ВариантыРасчетаЦенНаборов.ПустаяСсылка());
	
	МассивОперацийПередачаНаКомиссию = Новый Массив;
	МассивОперацийПередачаНаКомиссию.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	МассивОперацийПередачаНаКомиссию.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	МассивОперацийПередачаНаКомиссию.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
	Запрос.УстановитьПараметр("ХозяйственныеОперацииПередачаНаКомиссию", МассивОперацийПередачаНаКомиссию);
	
	Запрос.Выполнить();
	
	ПараметрыПечати.ВыводитьНаборы = ЕстьНаборы;
	
КонецПроцедуры

Функция ТекстЗапросаДанныхШапкиДляПечатиСчетаФактуры(ПараметрыПечати)
	
	ПечататьСчетаФактурыПолученные = ПараметрыПечати.Свойство("МассивСчетФактураПолученный");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетаФактурыОснования.Ссылка КАК Ссылка,
	|	МИНИМУМ(СчетаФактурыОснования.ДокументОснование) КАК ДокументОснование
	|ПОМЕСТИТЬ СчетаФактурыОснованияПервые
	|ИЗ
	|	СчетаФактурыОснования КАК СчетаФактурыОснования
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактурыОснования.Ссылка
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактурыОснования.Ссылка КАК Ссылка,
	|	ДанныеОснований.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеКонтрагента.СтранаРегистрации КАК СтранаРегистрации,
	|	
	|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеОрганизацийПоставщик.ОбособленноеПодразделение, ЛОЖЬ) ТОГДА
	|		ДанныеОрганизацийПоставщик.ГоловнаяОрганизация
	|	ИНАЧЕ
	|		СчетФактураВыданный.Организация
	|	КОНЕЦ КАК Организация,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеОрганизацийПокупатель.ОбособленноеПодразделение, ЛОЖЬ) ТОГДА
	|		ДанныеОрганизацийПокупатель.ГоловнаяОрганизация
	|	КОГДА ЕСТЬNULL(ДанныеКонтрагента.ОбособленноеПодразделение, ЛОЖЬ) ТОГДА
	|		ДанныеКонтрагента.ГоловнойКонтрагент
	|	ИНАЧЕ
	|		СчетФактураВыданный.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|
	|	ВЫБОР КОГДА НЕ ДанныеПодразделений.РегистрацияВНалоговомОргане.Ссылка ЕСТЬ NULL ТОГДА
	|		ДанныеПодразделений.РегистрацияВНалоговомОргане
	|	ИНАЧЕ	
	|		ВЫБОР КОГДА ДанныеОснований.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) ТОГДА
	|			СчетФактураВыданный.Организация
	|		ИНАЧЕ
	|			ДанныеОснований.Грузоотправитель
	|		КОНЕЦ
	|	КОНЕЦ КАК Грузоотправитель,
	|
	|	ВЫБОР КОГДА ДанныеОснований.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) ТОГДА
	|		СчетФактураВыданный.Контрагент
	|	ИНАЧЕ
	|		ДанныеОснований.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|
	|	ВЫБОР КОГДА НЕ ДанныеПодразделений.РегистрацияВНалоговомОргане.Ссылка ЕСТЬ NULL ТОГДА
	|		ДанныеПодразделений.РегистрацияВНалоговомОргане.ЦифровойИндексОбособленногоПодразделения
	|	КОГДА ЕСТЬNULL(ДанныеОрганизацийПоставщик.ОбособленноеПодразделение, ЛОЖЬ) ТОГДА
	|		ДанныеОрганизацийПоставщик.ЦифровойИндексОбособленногоПодразделения
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ЦифровойИндекс,
	|
	|	ВЫБОР КОГДА НЕ ДанныеПодразделений.РегистрацияВНалоговомОргане.Ссылка ЕСТЬ NULL ТОГДА
	|		ДанныеПодразделений.РегистрацияВНалоговомОргане.КПП
	|	ИНАЧЕ
	|		ДанныеОрганизацийПоставщик.КПП
	|	КОНЕЦ КАК КПППоставщика,
	|
	|	ЕСТЬNULL(ДанныеКонтрагента.КПП, ДанныеОрганизацийПокупатель.КПП) КАК КПППокупателя,
	|
	|	ДанныеОрганизацийПоставщик.Префикс КАК Префикс,
	|	ДанныеОснований.Комиссионер КАК Комиссионер,
	|	ДанныеВалюты.Ссылка КАК Валюта,
	|	ДанныеВалюты.НаименованиеПолное КАК ВалютаНаименованиеПолное,
	|	ДанныеВалюты.Код КАК ВалютаКод,
	|//РеквизитыОснованийДляУПД
	|	ВЫБОР
	|		КОГДА НЕ ДанныеОснований.РасчетыЧерезОтдельногоКонтрагента
	|			ИЛИ СчетФактураВыданный.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПечататьСчетФактураВыданный
	|
	|ПОМЕСТИТЬ ДанныеОснований
	|ИЗ
	|	СчетаФактурыОснованияПервые КАК СчетаФактурыОснования
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|	ПО СчетФактураВыданный.Ссылка = СчетаФактурыОснования.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеОснований
	|	ПО СчетаФактурыОснования.ДокументОснование = ДанныеОснований.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ДанныеОрганизацийПоставщик
	|	ПО СчетФактураВыданный.Организация = ДанныеОрганизацийПоставщик.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК ДанныеПодразделений
	|	ПО ДанныеПодразделений.Организация = СчетФактураВыданный.Организация
	|		И ДанныеПодразделений.Подразделение = ЕСТЬNULL(ДанныеОснований.Склад.Подразделение, ДанныеОснований.Подразделение)
	|		И ДанныеПодразделений.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ДанныеОрганизацийПокупатель
	|	ПО ДанныеОрганизацийПокупатель.Ссылка = СчетФактураВыданный.Контрагент
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ДанныеКонтрагента
	|	ПО ДанныеКонтрагента.Ссылка = СчетФактураВыданный.Контрагент
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК ДанныеВалюты
	|	ПО ДанныеОснований.Валюта = ДанныеВалюты.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактурыОснования.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ТаблицаТоваров.ЭтоТовар
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУслуги,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаТоваров.ЭтоТовар
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьТовары
	|ПОМЕСТИТЬ
	|	НоменклатураДокументов
	|ИЗ
	|	СчетаФактурыОснования КАК СчетаФактурыОснования
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|	ПО СчетаФактурыОснования.ДокументОснование = ТаблицаТоваров.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактурыОснования.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ПечататьСчетаФактурыПолученные Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОснований.ДокументОснование КАК ДокументОснование,
		|	ТаблицаОснований.Ссылка            КАК Ссылка
		|
		|ПОМЕСТИТЬ СчетаФактурыПолученныеОснования
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
		|ГДЕ
		|	ТаблицаОснований.Ссылка В (&МассивСчетФактураПолученный)
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаФактурыОснования.Ссылка КАК Ссылка,
		|	МИНИМУМ(СчетаФактурыОснования.ДокументОснование) КАК ДокументОснование
		|ПОМЕСТИТЬ СчетаФактурыПолученныеОснованияПервые
		|ИЗ
		|	СчетаФактурыПолученныеОснования КАК СчетаФактурыОснования
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетаФактурыОснования.Ссылка
		|
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаФактурыОснования.Ссылка КАК Ссылка,
		|	ДанныеОснований.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеКонтрагента.СтранаРегистрации КАК СтранаРегистрации,
		|
		|	ВЫБОР КОГДА ДанныеКонтрагента.ОбособленноеПодразделение ТОГДА
		|		ДанныеКонтрагента.ГоловнойКонтрагент
		|	ИНАЧЕ
		|		ДанныеКонтрагента.Ссылка
		|	КОНЕЦ КАК Организация,
		|
		|	ВЫБОР КОГДА ДанныеОрганизации.ОбособленноеПодразделение ТОГДА
		|		ДанныеОрганизации.ГоловнаяОрганизация
		|	ИНАЧЕ
		|		ДанныеОрганизации.Ссылка
		|	КОНЕЦ КАК Контрагент,
		|
		|	ВЫБОР КОГДА ДанныеОснований.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) ТОГДА
		|		СчетФактураПолученный.Контрагент
		|	ИНАЧЕ
		|		ДанныеОснований.Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель,
		|
		|	ВЫБОР КОГДА ДанныеОснований.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) ТОГДА
		|		СчетФактураПолученный.Организация
		|	ИНАЧЕ
		|		ДанныеОснований.Грузополучатель
		|	КОНЕЦ КАК Грузополучатель,
		|
		|	ДанныеКонтрагента.КПП КАК КПППоставщика,
		|	ДанныеОрганизации.КПП КАК КПППокупателя,
		|
		|	ВЫБОР КОГДА ДанныеОснований.Комиссионер = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА
		|		ДанныеОснований.Организация.Префикс
		|	ИНАЧЕ
		|		ДанныеОснований.Комиссионер.Префикс
		|	КОНЕЦ КАК Префикс,
		|	
		|	ДанныеОснований.Комиссионер КАК Комиссионер,
		|	ДанныеВалюты.Ссылка КАК Валюта,
		|	ДанныеВалюты.НаименованиеПолное КАК ВалютаНаименованиеПолное,
		|	ДанныеВалюты.Код КАК ВалютаКод
		|
		|ПОМЕСТИТЬ ДанныеОснованийСчетФактураПолученный
		|ИЗ
		|	СчетаФактурыПолученныеОснованияПервые КАК СчетаФактурыОснования
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|	ПО СчетаФактурыОснования.Ссылка = СчетФактураПолученный.Ссылка
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеОснований
		|	ПО СчетаФактурыОснования.ДокументОснование = ДанныеОснований.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ДанныеОрганизации
		|	ПО СчетФактураПолученный.Организация = ДанныеОрганизации.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ДанныеКонтрагента
		|	ПО СчетФактураПолученный.Контрагент = ДанныеКонтрагента.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК ДанныеВалюты
		|	ПО ДанныеОснований.Валюта = ДанныеВалюты.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаФактурыОснования.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ ТаблицаТоваров.ЭтоТовар
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьУслуги,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТаблицаТоваров.ЭтоТовар
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьТовары
		|ПОМЕСТИТЬ
		|	НоменклатураДокументовПолученные
		|ИЗ
		|	СчетаФактурыПолученныеОснования КАК СчетаФактурыОснования
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
		|	ПО СчетаФактурыОснования.ДокументОснование = ТаблицаТоваров.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетаФактурыОснования.Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторГосКонтракта             КАК ИдентификаторГосКонтракта,
	|	ДанныеОснований.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	ДанныеОснований.СтранаРегистрации                     КАК СтранаРегистрации,
	|	
	|	&ПредставлениеСчетФактура                             КАК ПредставлениеДокумента,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ВЫБОР КОГДА ДанныеДокумента.Исправление ТОГДА
	|		ЕСТЬNULL(ДанныеДокумента.СчетФактураОснование.Дата, ДАТАВРЕМЯ(1,1,1))
	|	ИНАЧЕ 
	|		ДанныеДокумента.Дата
	|	КОНЕЦ                                                 КАК Дата,
	|	ВЫБОР КОГДА ДанныеДокумента.Исправление ТОГДА
	|		ДанныеДокумента.НомерИсправления 
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                 КАК НомерИсправления,
	|	ВЫБОР КОГДА ДанныеДокумента.Исправление ТОГДА
	|		ДанныеДокумента.Дата
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                 КАК ДатаИсправления,
	|	ДанныеДокумента.Исправление                           КАК Исправление,
	|	ДанныеДокумента.Корректировочный                      КАК КорректировочныйСчетФактура,
	|	ЕСТЬNULL(ТаблицаПлатежноРасчетныеДокументы.СтрокаПлатежноРасчетныеДокументы,
	|		ДанныеДокумента.СтрокаПлатежноРасчетныеДокументы) КАК СтрокаПоДокументу,
	|	ДанныеДокумента.Валюта                                КАК ВалютаСчетаФактуры,
	|	ДанныеОснований.Контрагент                            КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КППКонтрагента = """"
	|			ТОГДА ДанныеОснований.КПППокупателя
	|	ИНАЧЕ
	|		ДанныеДокумента.КППКонтрагента
	|	КОНЕЦ                                                 КАК КПППокупателя,
	|	ДанныеОснований.Грузополучатель                       КАК Грузополучатель,
	|	ДанныеОснований.Организация                           КАК Организация,
	|	ДанныеОснований.КПППоставщика                         КАК КПППоставщика,
	|	ДанныеОснований.Грузоотправитель                      КАК Грузоотправитель,
	|	ДанныеОснований.Префикс                               КАК Префикс,
	|	ДанныеОснований.ЦифровойИндекс                        КАК ИндексПодразделения,
	|	ТаблицаОтветственныеЛица.РуководительНаименование     КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность        КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ДанныеОснований.Валюта                                КАК Валюта,
	|	ДанныеОснований.ВалютаНаименованиеПолное              КАК ВалютаНаименованиеПолное,
	|	ДанныеОснований.ВалютаКод                             КАК ВалютаКод,
	|	//РеквизитыОснованийДляУПД
	|	//ДанныеУПДВыданного
	|	ВЫБОР
	|		КОГДА НоменклатураДокументов.ЕстьУслуги
	|				И НЕ НоменклатураДокументов.ЕстьТовары
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                 КАК ТолькоУслуги
	|ИЗ
	|	СчетаФактурыОснованияПервые КАК СчетаФактурыОснования
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК ДанныеДокумента
	|	ПО СчетаФактурыОснования.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеОснований КАК ДанныеОснований
	|	ПО СчетаФактурыОснования.Ссылка = ДанныеОснований.Ссылка
	|		И ДанныеОснований.ПечататьСчетФактураВыданный
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураДокументов КАК НоменклатураДокументов
	|	ПО СчетаФактурыОснования.Ссылка = НоменклатураДокументов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|	ПО СчетаФактурыОснования.ДокументОснование = ТаблицаОтветственныеЛица.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПлатежноРасчетныеДокументы КАК ТаблицаПлатежноРасчетныеДокументы
	|	ПО СчетаФактурыОснования.Ссылка = ТаблицаПлатежноРасчетныеДокументы.Ссылка";
	
	Если ПечататьСчетаФактурыПолученные Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" +
		
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                                КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО                                          КАК ИдентификаторГосКонтракта,
		|	ДанныеОснований.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
		|	ДанныеОснований.СтранаРегистрации                     КАК СтранаРегистрации,
		|	&ПредставлениеСчетФактураПосредника                   КАК ПредставлениеДокумента,
		|	ДанныеДокумента.Номер                                 КАК Номер,
		|	ДанныеДокумента.ДатаСоставления                       КАК Дата,
		|	ВЫБОР КОГДА ДанныеДокумента.Исправление ТОГДА
		|		ДанныеДокумента.НомерИсправления
		|	ИНАЧЕ
		|		НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                                 КАК НомерИсправления,
		|	ВЫБОР КОГДА ДанныеДокумента.Исправление ТОГДА
		|		ДанныеДокумента.ДатаИсправления
		|	ИНАЧЕ
		|		НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                                 КАК ДатаИсправления,
		|	ДанныеДокумента.Исправление                           КАК Исправление,
		|	ЛОЖЬ                                                  КАК КорректировочныйСчетФактура,
		|	""""                                                  КАК СтрокаПоДокументу,
		|	ДанныеДокумента.Валюта                                КАК ВалютаСчетаФактуры,
		|	ДанныеОснований.Контрагент                            КАК Контрагент,
		|	ДанныеОснований.КПППокупателя                         КАК КПППокупателя,
		|	ДанныеОснований.Грузополучатель                       КАК Грузополучатель,
		|	ДанныеОснований.Организация                           КАК Организация,
		|	ДанныеОснований.КПППоставщика                         КАК КПППоставщика,
		|	ДанныеОснований.Грузоотправитель                      КАК Грузоотправитель,
		|	ДанныеОснований.Префикс                               КАК Префикс,
		|	0                                                     КАК ИндексПодразделения,
		|	""""                                                  КАК Руководитель,
		|	""""                                                  КАК ДолжностьРуководителя,
		|	""""                                                  КАК ГлавныйБухгалтер,
		|	ДанныеОснований.Валюта                                КАК Валюта,
		|	ДанныеОснований.ВалютаНаименованиеПолное              КАК ВалютаНаименованиеПолное,
		|	ДанныеОснований.ВалютаКод                             КАК ВалютаКод,
		|	//ДанныеУПДПолученного
		|	ВЫБОР
		|		КОГДА НоменклатураДокументов.ЕстьУслуги
		|				И НЕ НоменклатураДокументов.ЕстьТовары
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                 КАК ТолькоУслуги
		|
		|ИЗ
		|	СчетаФактурыПолученныеОснованияПервые КАК СчетаФактурыОснования
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК ДанныеДокумента
		|	ПО СчетаФактурыОснования.Ссылка = ДанныеДокумента.Ссылка
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеОснованийСчетФактураПолученный КАК ДанныеОснований
		|	ПО СчетаФактурыОснования.Ссылка = ДанныеОснований.Ссылка
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураДокументовПолученные КАК НоменклатураДокументов
		|	ПО СчетаФактурыОснования.Ссылка = НоменклатураДокументов.Ссылка";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ПараметрыПечати.Свойство("ДополнитьДаннымиУПД") И ПараметрыПечати.ДополнитьДаннымиУПД Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//РеквизитыОснованийДляУПД",
		"	ДанныеОснований.Основание           КАК Основание,
		|	ДанныеОснований.ОснованиеДата       КАК ОснованиеДата,
		|	ДанныеОснований.ОснованиеНомер      КАК ОснованиеНомер,
		|	ДанныеОснований.ДоверенностьНомер   КАК ДоверенностьНомер,
		|	ДанныеОснований.ДоверенностьДата    КАК ДоверенностьДата,
		|	ДанныеОснований.ДоверенностьВыдана  КАК ДоверенностьВыдана,
		|	ДанныеОснований.ДоверенностьЛицо    КАК ДоверенностьЛицо,
		|	ДанныеОснований.Кладовщик           КАК Кладовщик,
		|	ДанныеОснований.ДолжностьКладовщика КАК ДолжностьКладовщика,");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДанныеУПДВыданного",
		"	ИСТИНА                              КАК ВыводитьКодНоменклатуры,
		|	НЕ ДанныеДокумента.Корректировочный КАК ПечатьНеТребуется,
		|	1                                   КАК СтатусУПД,");

		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДанныеУПДПолученного",
		"	НЕОПРЕДЕЛЕНО                        КАК Основание,
		|	НЕОПРЕДЕЛЕНО                        КАК ОснованиеДата,
		|	НЕОПРЕДЕЛЕНО                        КАК ОснованиеНомер,
		|	НЕОПРЕДЕЛЕНО                        КАК ДоверенностьНомер,
		|	НЕОПРЕДЕЛЕНО                        КАК ДоверенностьДата,
		|	НЕОПРЕДЕЛЕНО                        КАК ДоверенностьВыдана,
		|	НЕОПРЕДЕЛЕНО                        КАК ДоверенностьЛицо,
		|	НЕОПРЕДЕЛЕНО                        КАК Кладовщик,
		|	НЕОПРЕДЕЛЕНО                        КАК ДолжностьКладовщика,
		|	ЛОЖЬ                                КАК ВыводитьКодНоменклатуры,
		|	ЛОЖЬ                                КАК ПечатьНеТребуется,
		|	1                                   КАК СтатусУПД,");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныхТабличнойЧастиДляПечатиСчетаФактуры(ПараметрыПечати)
	
	ПечататьСчетаФактурыПолученные = ПараметрыПечати.Свойство("МассивСчетФактураПолученный");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетаФактурыОснования.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ТаблицаДокумента.НоменклатураКод КАК НоменклатураКод,
	|	ТаблицаДокумента.КодТНВЭД КАК КодТНВЭД,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДанныеЕдиницыИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ДанныеЕдиницыИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ДанныеХарактеристики.НаименованиеПолное, """") КАК ХарактеристикаНаименование,
	|	ТаблицаДокумента.НомерГТД КАК НомерГТД,
	|	ДанныеСтраныПросхождения.Ссылка КАК СтранаПроисхождения,
	|	ДанныеСтраныПросхождения.Код КАК СтранаПроисхожденияКод,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаБезНДС + ТаблицаДокумента.СуммаНДС КАК СуммаСНДС,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.КоличествоДо КАК КоличествоДо,
	|	ТаблицаДокумента.ЦенаДо КАК ЦенаДо,
	|	ТаблицаДокумента.СуммаБезНДСДо КАК СуммаБезНДСДо,
	|	ТаблицаДокумента.РазницаБезНДСУвеличение КАК РазницаБезНДСУвеличение,
	|	ТаблицаДокумента.РазницаБезНДСУменьшение КАК РазницаБезНДСУменьшение,
	|	ТаблицаДокумента.СуммаНДСДо КАК СуммаНДСДо,
	|	ТаблицаДокумента.РазницаНДСУвеличение КАК РазницаНДСУвеличение,
	|	ТаблицаДокумента.РазницаНДСУменьшение КАК РазницаНДСУменьшение,
	|	ТаблицаДокумента.СуммаБезНДСДо + ТаблицаДокумента.СуммаНДСДо КАК СуммаСНДСДо,
	|	ТаблицаДокумента.РазницаСНДСУвеличение КАК РазницаСНДСУвеличение,
	|	ТаблицаДокумента.РазницаСНДСУменьшение КАК РазницаСНДСУменьшение,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	ТаблицаТоваровДокументов КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаФактурыОснования КАК СчетаФактурыОснования
	|		ПО (СчетаФактурыОснования.ДокументОснование = ТаблицаДокумента.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ДанныеЕдиницыИзмерения
	|		ПО ТаблицаДокумента.ЕдиницаИзмерения = ДанныеЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ДанныеХарактеристики
	|		ПО ТаблицаДокумента.Характеристика = ДанныеХарактеристики.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК ДанныеСтраныПросхождения
	|		ПО ТаблицаДокумента.НомерГТД.СтранаПроисхождения = ДанныеСтраныПросхождения.Ссылка
	|ГДЕ
	|	НЕ ТаблицаДокумента.ЭтоВозвратнаяТара";
	
	Если ПараметрыПечати.ВыводитьНаборы Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДанныеНаборов",
		"МИНИМУМ(ТаблицаДокумента.НомерСтрокиНаборы)                     КАК НомерСтрокиНаборы,
		|	ТаблицаДокумента.ВариантПредставленияНабораВПечатныхФормах   КАК ВариантПредставленияНабораВПечатныхФормах,
		|	ТаблицаДокумента.ВариантРасчетаЦеныНабора                    КАК ВариантРасчетаЦеныНабора,
		|	ТаблицаДокумента.НоменклатураНабора                          КАК НоменклатураНабора,
		|	ТаблицаДокумента.ХарактеристикаНабора                        КАК ХарактеристикаНабора,
		|	ТаблицаДокумента.ЭтоКомплектующие                            КАК ЭтоКомплектующие,
		|	ТаблицаДокумента.ЭтоНабор                                    КАК ЭтоНабор,
		|	ТаблицаДокумента.ПолныйНабор                                 КАК ПолныйНабор,");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ГруппировкаНаборов",
		"ТаблицаДокумента.ВариантПредставленияНабораВПечатныхФормах,
		|	ТаблицаДокумента.ВариантРасчетаЦеныНабора,
		|	ТаблицаДокумента.НоменклатураНабора,
		|	ТаблицаДокумента.ХарактеристикаНабора,
		|	ТаблицаДокумента.ЭтоКомплектующие,
		|	ТаблицаДокумента.ЭтоНабор,
		|	ТаблицаДокумента.ПолныйНабор,");
		
	КонецЕсли;
	
	Если ПечататьСчетаФактурыПолученные Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" +
		СтрЗаменить(ТекстЗапроса, "СчетаФактурыОснования", "СчетаФактурыПолученныеОснования");
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	//ПорядокНаборов
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;";
	
	Если ПараметрыПечати.ВыводитьНаборы Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПорядокНаборов",
		"НомерСтрокиНаборы,
		|	НоменклатураНабора,
		|	ХарактеристикаНабора,
		|	ЭтоНабор УБЫВ,");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИсходныхДокументовДляПечатиСчетаФактуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетаФактурыОснования.Ссылка                        КАК Ссылка,
	|	ТаблицаОснований.ДокументОснование                  КАК ДокументОснование,
	|	ТаблицаОснований.ИсходныйДокумент                   КАК ИсходныйДокумент,
	|	ТаблицаОснований.НомерИсходногоДокумента            КАК НомерСчетаФактуры,
	|	ТаблицаОснований.ДатаИсходногоДокумента             КАК ДатаСчетаФактуры,
	|	ТаблицаОснований.НомерИсправленияИсходногоДокумента КАК НомерИсправленияСчетаФактуры,
	|	ТаблицаОснований.ДатаИсправленияИсходногоДокумента  КАК ДатаИсправленияСчетаФактуры
	|ИЗ
	|	СчетаФактурыОснования КАК СчетаФактурыОснования
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК ДанныеДокумента
	|	ПО СчетаФактурыОснования.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаОснований
	|	ПО СчетаФактурыОснования.Ссылка = ТаблицаОснований.Ссылка
	|		И СчетаФактурыОснования.ДокументОснование = ТаблицаОснований.ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ИсходныйДокумент
	|ИТОГИ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолученияНомеровИДатПлатежноРасчетныхДокументов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ТаблицаДокументов.Ссылка КАК СчетФактура
	|ПОМЕСТИТЬ ВтТаблицаДокументов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаполненияПлатежноРасчетныхДокументов КАК ТаблицаДокументов
	|		ПО Расчеты.Регистратор = ТаблицаДокументов.ДокументОснование
	|			И (Расчеты.АналитикаУчетаПоПартнерам В (&МассивАналитикУчетаПоПартнерам))
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Расчеты.Предоплата > 0
	|	И Расчеты.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ТаблицаДокументов.СчетФактура КАК СчетФактура
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокументов.РасчетныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Номер,
	|	0,
	|	0,
	|	ТаблицаДокументов.СчетФактура
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокументов.РасчетныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Номер,
	|	0,
	|	0,
	|	ТаблицаДокументов.СчетФактура
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокументов.РасчетныйДокумент
	|ИТОГИ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЗаполненияПлатежноРасчетныхДокументов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьТаблицуПлатежноРасчетныхДокументовПоВыборке(ПлатежноРасчетныеДокументы, ДанныеВыборки)
	
	Выборка = ДанныеВыборки.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
		
		Если ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента) Тогда
			НоваяСтрока.НомерПлатежноРасчетногоДокумента = Выборка.НомерВходящегоДокумента;
		Иначе
			НоваяСтрока.НомерПлатежноРасчетногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				Выборка.Номер,
				Ложь,
				Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента) Тогда
			НоваяСтрока.ДатаПлатежноРасчетногоДокумента = Выборка.ДатаВходящегоДокумента;
		Иначе
			НоваяСтрока.ДатаПлатежноРасчетногоДокумента = Выборка.Дата;
		КонецЕсли;
		
	КонецЦикла;
	ПлатежноРасчетныеДокументы.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента", "");
	ПлатежноРасчетныеДокументы.Сортировать("ДатаПлатежноРасчетногоДокумента Возр, НомерПлатежноРасчетногоДокумента Возр");
		
КонецПроцедуры

Функция СтрокаРасчетноПлатежныхДокументов(ПлатежноРасчетныеДокументы) Экспорт
	
	СтрокаНомеровИДата = "";
	Для Каждого СтрокаТаблицы Из ПлатежноРасчетныеДокументы Цикл
		СтрокаНомеровИДата = СтрокаНомеровИДата + ?(ПустаяСтрока(СтрокаНомеровИДата), "", ", ")
			+ СтрокаТаблицы.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(СтрокаТаблицы.ДатаПлатежноРасчетногоДокумента, "ДЛФ=D");
	КонецЦикла; 
		
	Возврат СтрокаНомеровИДата;
	
КонецФункции
